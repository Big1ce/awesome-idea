{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "IDEA 高效使用指南",
  "home_page_url": "https://codingdocs.github.io/awesome-idea/",
  "feed_url": "https://codingdocs.github.io/awesome-idea/feed.json",
  "items": [
    {
      "title": "必备插件",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/",
      "content_html": "<h2 id=\"必备插件\" tabindex=\"-1\"> 必备插件</h2>\n<ul>\n<li><a href=\"/plugins/shortcut-key.html\">IDEA 快捷键相关插件</a></li>\n<li><a href=\"/plugins/themes.html\">IDEA 优质主题推荐</a></li>\n<li><a href=\"/plugins/improve-code.html\">IDEA 代码优化插件推荐</a></li>\n<li><a href=\"/plugins/interface-beautification.html\">IDEA 界面美化插件推荐</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"/plugins/camel-case/\">Camel Case: 命名之间快速切换</a></li>\n<li><a href=\"/plugins/code-glance/\">CodeGlance: 代码微型地图</a></li>\n<li><a href=\"/plugins/code-statistic/\">Statistic: 项目代码统计</a></li>\n<li><a href=\"/plugins/git-commit-template/\">Git Commit Template: 提交代码格式规范</a></li>\n<li><a href=\"/plugins/gson-format/\">GsonFormat: JSON 转对象</a></li>\n<li><a href=\"/plugins/idea-features-trainer/\">IDE Features Trainer: IDEA 交互式教程</a></li>\n<li><a href=\"/plugins/jclasslib/\">jclasslib: 一款 IDEA 字节码查看神器</a></li>\n<li><a href=\"/plugins/maven-helper.html\">Maven Helper: 解决 Maven 依赖冲突问题</a></li>\n<li><a href=\"/plugins/rest/\">RestfulToolkit: RESTful Web 服务辅助开发工具</a></li>\n<li><a href=\"/plugins/save-actions/\">Save Actions: 优化文件保存</a></li>\n<li><a href=\"/plugins/sequence-diagram.html\">SequenceDiagram: 一键可以生成时序图</a></li>\n<li><a href=\"/plugins/translation/\">Translation: 翻译</a></li>\n<li><a href=\"/plugins/others.html\">其他</a></li>\n</ul>\n",
      "date_modified": "2022-03-30T14:35:32.786Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "IDEA 代码优化插件推荐",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/improve-code.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/improve-code.html",
      "content_html": "<h2 id=\"lombok-帮你简化代码\" tabindex=\"-1\"> Lombok: 帮你简化代码</h2>\n<p>之前没有推荐这个插件的原因是觉得已经是人手必备的了。如果你要使用 Lombok 的话，不光是要安装这个插件，你的项目也要引入相关的依赖。</p>\n<div><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>\n  <span><span><span>&lt;</span>groupId</span><span>></span></span>org.projectlombok<span><span><span>&lt;/</span>groupId</span><span>></span></span>\n  <span><span><span>&lt;</span>artifactId</span><span>></span></span>lombok<span><span><span>&lt;/</span>artifactId</span><span>></span></span>\n  <span><span><span>&lt;</span>optional</span><span>></span></span>true<span><span><span>&lt;/</span>optional</span><span>></span></span>\n<span><span><span>&lt;/</span>dependency</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>使用 Lombok 能够帮助我们少写很多代码比如 Getter/Setter、Constructor 等等。</p>\n<p>关于 Lombok 的使用，可以查看 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485385&amp;idx=2&amp;sn=a7c3fb4485ffd8c019e5541e9b1580cd&amp;chksm=cea24802f9d5c1144eee0da52cfc0cc5e8ee3590990de3bb642df4d4b2a8cd07f12dd54947b9&amp;token=1667678311&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">《十分钟搞懂 Java 效率工具 Lombok 使用与原理》<ExternalLinkIcon/></a>。</p>\n<h2 id=\"codota-代码智能提示\" tabindex=\"-1\"> Codota: 代码智能提示</h2>\n<div><p>注</p>\n<p>目前 Codota 已经更名为 <strong>Tabnine</strong> 。</p>\n</div>\n<p>我一直在用的一个插件，可以说非常好用了（<em>我身边的很多大佬平时写代码也会用这个插件</em>）。</p>\n<p>Codota 这个插件用于智能代码补全，它基于数百万 Java 程序，能够根据程序上下文提示补全代码。相比于 IDEA 自带的智能提示来说，Codota 的提示更加全面一些。</p>\n<p>除了代码补全之外，Codota 还支持代码智能搜索，直接选中对应的类或者方法即可搜索相关的代码示例。</p>\n<p><img src=\"@source/plugins/assets/Codota2.png\" alt=\"Codota2\"></p>\n<p>如果你觉得 IDEA 插件安装的太多比较卡顿的话，不用担心！Codota 插件还有一个对应的 <a href=\"https://www.codota.com/code\" target=\"_blank\" rel=\"noopener noreferrer\">在线网站<ExternalLinkIcon/></a>，在这个网站上你可以根据代码关键字搜索相关代码示例，非常不错！</p>\n<p>我在工作中经常会用到，说实话确实给我带来了很大便利，比如我们搜索 <code>Files.readAllLines</code> 相关的代码，搜索出来的结果如下图所示:</p>\n<p><img src=\"@source/plugins/assets/Codota3.png\" alt=\"Codota3\"></p>\n<p>另外，Codota 插件的基础功能都是免费的。你的代码也不会被泄露，这点你不用担心。</p>\n<p>类似的插件还有阿里云智能编码插件 <strong>Cosy</strong>(Alibaba Cloud AI Coding Assistant) ，关于 Cosy 的详细介绍，可以看一下我写的 <a href=\"https://zhuanlan.zhihu.com/p/464874603\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云 Java 智能编码插件 Cosy 诞生！<ExternalLinkIcon/></a> 这篇文章。</p>\n<h2 id=\"alibaba-java-code-guidelines-阿里巴巴-java-代码规范\" tabindex=\"-1\"> Alibaba Java Code Guidelines: 阿里巴巴 Java 代码规范</h2>\n<p>阿里巴巴 Java 代码规范，对应的 Github 地址为: <a href=\"https://github.com/alibaba/p3c\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alibaba/p3c<ExternalLinkIcon/></a> 。非常推荐安装！</p>\n<p>安装完成之后建议将与语言替换成中文，提示更加友好一点。</p>\n<p><img src=\"@source/plugins/assets/p3c/Alibaba-Java-Code-Guidelines2.png\" alt=\"Alibaba-Java-Code-Guidelines2\"></p>\n<p>根据官方描述:</p>\n<blockquote>\n<p>目前这个插件实现了开发手册中的的 53 条规则，大部分基于 PMD 实现，其中有 4 条规则基于 IDEA 实现，并且基于 IDEA <a href=\"https://www.jetbrains.com/help/idea/code-inspection.html\" target=\"_blank\" rel=\"noopener noreferrer\">Inspection<ExternalLinkIcon/></a>实现了实时检测功能。部分规则实现了 Quick Fix 功能，对于可以提供 Quick Fix 但没有提供的，我们会尽快实现，也欢迎有兴趣的同学加入进来一起努力。 目前插件检测有两种模式: 实时检测、手动触发。</p>\n</blockquote>\n<p>上述提到的开发手册也就是在 Java 开发领域赫赫有名的《阿里巴巴 Java 开发手册》。</p>\n<h3 id=\"手动配置检测规则\" tabindex=\"-1\"> 手动配置检测规则</h3>\n<p>你还可以手动配置相关 inspection 规则:</p>\n<p><img src=\"@source/plugins/assets/p3c/Alibaba-Java-Code-Guidelines3.png\" alt=\"Alibaba-Java-Code-Guidelines3\"></p>\n<h3 id=\"使用效果\" tabindex=\"-1\"> 使用效果</h3>\n<p>这个插件会实时检测出我们的代码不匹配它的规则的地方，并且会给出修改建议。比如我们按照下面的方式去创建线程池的话，这个插件就会帮我们检测出来,如下图所示。</p>\n<p><img src=\"@source/plugins/assets/p3c/Alibaba-Java-Code-Guidelines1.png\" alt=\"Alibaba-Java-Code-Guidelines1\"></p>\n<p>这个可以对应上 《阿里巴巴 Java 开发手册》 这本书关于创建线程池的方式说明。</p>\n<p><img src=\"@source/plugins/assets/p3c/阿里巴巴开发手册-线程池创建.png\" alt=\"\"></p>\n<h2 id=\"checkstyle-java-代码格式规范\" tabindex=\"-1\"> CheckStyle: Java 代码格式规范</h2>\n<h3 id=\"为何需要-checkstyle-插件\" tabindex=\"-1\"> 为何需要 CheckStyle 插件？</h3>\n<p><strong>CheckStyle 几乎是 Java 项目开发必备的一个插件了，它会帮助我们检查 Java 代码的格式是否有问题比如变量命名格式是否有问题、某一行代码的长度是否过长等等。</strong></p>\n<p>在项目上，<strong>通过项目开发人员自我约束来规范代码格式必然是不靠谱的！</strong> 因此，我们非常需要这样一款工具来帮助我们规范代码格式。</p>\n<p>如果你看过我写的轮子的话，可以发现我为每一个项目都集成了 CheckStyle，并且设置了 <strong>Git Commit 钩子</strong>，保证在提交代码之前代码格式没有问题。</p>\n<div><p>Guide 哥造的轮子 (代码简洁，结构清晰，欢迎学习，欢迎一起完善)</p>\n<ol>\n<li><a href=\"https://github.com/Snailclimb/guide-rpc-framework\" target=\"_blank\" rel=\"noopener noreferrer\">guide-rpc-framework<ExternalLinkIcon/></a>: A custom RPC framework implemented by Netty+Kyro+Zookeeper.（一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程）</li>\n<li><a href=\"https://github.com/Snailclimb/jsoncat\" target=\"_blank\" rel=\"noopener noreferrer\">jsoncat<ExternalLinkIcon/></a>: 仿 Spring Boot 但不同于 Spring Boot 的一个轻量级的 HTTP 框架</li>\n</ol>\n<div><p>**Git 钩子**</p>\n<p>Git 能在特定的重要动作比如 commit、push 发生时触发自定义脚本。 钩子都被存储在 Git 目录下的 <code>hooks</code> 子目录中。 也即绝大部分项目中的 <code>.git/hooks</code> 。</p>\n</div>\n</div>\n<h3 id=\"如何在-maven-gradle-项目中集成-checksytle\" tabindex=\"-1\"> 如何在 Maven/Gradle 项目中集成 Checksytle?</h3>\n<p>一般情况下，我们都是将其集成在项目中，并设置相应的 Git 钩子。网上有相应的介绍文章，这里就不多提了。</p>\n<p>如果你觉得网上的文章不直观的话，可以参考我上面提到了两个轮子:</p>\n<ol>\n<li><a href=\"https://github.com/Snailclimb/guide-rpc-framework\" target=\"_blank\" rel=\"noopener noreferrer\">guide-rpc-framework<ExternalLinkIcon/></a>: Maven 项目集成 Checksytle。</li>\n<li><a href=\"https://github.com/Snailclimb/jsoncat\" target=\"_blank\" rel=\"noopener noreferrer\">jsoncat<ExternalLinkIcon/></a>: Gradle 项目集成 Checksytle。</li>\n</ol>\n<p>如果你在项目中集成了 Checksytle 的话，每次检测会生成一个 HTML 格式的文件告诉你哪里的代码格式不对，这样看着非常不直观。通过 Checksytle 插件的话可以非常直观的将项目中存在格式问题的地方显示出来。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/image-20201013135044410.png\" alt=\"\"></p>\n<p>如果你只是自己在本地使用，并不想在项目中集成 Checksytle 的话也可以，只需要下载一个 Checksytle 插件就足够了。</p>\n<h3 id=\"如何安装\" tabindex=\"-1\"> 如何安装？</h3>\n<p>我们直接在 IDEA 的插件市场即可找到这个插件。我这里已经安装好了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/image-20201013103610557.png\" alt=\"\"></p>\n<p>安装插件之后重启 IDEA，你会发现就可以在底部菜单栏找到 CheckStyle 了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/image-20201013134644991.png\" alt=\"\"></p>\n<h3 id=\"如何自定义检测规则\" tabindex=\"-1\"> 如何自定义检测规则？</h3>\n<p>如果你需要自定义代码格式检测规则的话，可以按照如下方式进行配置（你可以导入用于自定义检测规则的<code>CheckStyle.xml</code>文件）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/setting-check-style.png\" alt=\"\"></p>\n<h3 id=\"使用效果-1\" tabindex=\"-1\"> 使用效果</h3>\n<p>配置完成之后，按照如下方式使用这个插件！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/run-check-style.png\" alt=\"run-check-style\"></p>\n<p>可以非常清晰的看到: CheckStyle 插件已经根据我们自定义的规则将项目中的代码存在格式问题的地方都检测了出来。</p>\n<h2 id=\"sonarlint-帮你优化代码\" tabindex=\"-1\"> SonarLint:帮你优化代码</h2>\n<p>SonarLint 帮助你发现代码的错误和漏洞，就像是代码拼写检查器一样，SonarLint 可以实时显示出代码的问题，并提供清晰的修复指导，以便你提交代码之前就可以解决它们。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-2@main/系统设计/image-20201019222817359.png\" alt=\"\"></p>\n<p>并且，很多项目都集成了 SonarQube,SonarLint 可以很方便地与 SonarQube 集成。</p>\n",
      "date_modified": "2022-03-30T14:35:32.787Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDEA 界面美化插件推荐",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/interface-beautification.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/interface-beautification.html",
      "content_html": "<h2 id=\"background-image-plus-背景图片\" tabindex=\"-1\"> Background Image Plus: 背景图片</h2>\n<p>我这里推荐使用国人 Jack Chu 基于 Background Image Plus 开发的最新版本，适用于 2021.x 版本的 IDEA。</p>\n<p>前面几个下载量比较高的，目前都还未支持 2021.x 版本的 IDEA。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/image-20211010174138279.png\" alt=\"Background Image Plus\"></p>\n<p>通过这个插件，你可以将 IDEA 背景设置为指定的图片，支持随机背景。</p>\n<p>效果图如下:</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/image-20211010173730828.png\" alt=\"Background Image Plus 设置背景效果图\"></p>\n<p>如果你想要设置随机背景的话，可以通过 IDEA 设置页 <strong>Settings</strong> -&gt; <strong>Appearance &amp; Behaviour</strong> -&gt; <strong>Background Image Plus</strong> 自定义设置项，随机显示目录下的图片为背景图。</p>\n<h2 id=\"power-mode-ii-代码特效\" tabindex=\"-1\"> Power Mode II: 代码特效</h2>\n<p>使用了这个插件之后，写代码会自带特效，适用于 2021.x 版本的 IDEA。 2021.x 版本之前，可以使用 <strong>activate-power-mode</strong> 。</p>\n<p><img src=\"@source/plugins/assets/power-mode/Power-Mode-II.gif\" alt=\"Power Mode II 效果图\"></p>\n<p>你可以通过 IDEA 设置页 <strong>Settings</strong> -&gt; <strong>Appearance &amp; Behaviour</strong> -&gt; <strong>Power Mode II</strong> 自定义设置项。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/image-20211010175304108.png\" alt=\"Power Mode II\"></p>\n<h2 id=\"nyan-progress-bar-进度条美化\" tabindex=\"-1\"> Nyan Progress Bar: 进度条美化</h2>\n<p>可以让你拥有更加漂亮的进度条。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/image-20211010175434133.png\" alt=\"\"></p>\n<h2 id=\"grep-console-控制台输出处理\" tabindex=\"-1\"> Grep Console: 控制台输出处理</h2>\n<p>可以说是必备的一个 IDEA 插件，非常实用！</p>\n<p>这个插件主要的功能有两个:</p>\n<p><strong>1. 自定义设置控制台输出颜色</strong></p>\n<p>我们可以在设置中进行相关的配置:</p>\n<p><img src=\"@source/plugins/assets/grep-console/grep-console2.png\" alt=\"grep-console2\"></p>\n<p>配置完成之后的 log warn 的效果对比图如下:</p>\n<p><img src=\"@source/plugins/assets/grep-console/grep-console3.png\" alt=\"grep-console3\"></p>\n<p><strong>2. 过滤控制台输出</strong></p>\n<p><img src=\"@source/plugins/assets/grep-console/grep-console.gif\" alt=\"grep-console\"></p>\n<h2 id=\"rainbow-brackets-彩虹括号\" tabindex=\"-1\"> Rainbow Brackets: 彩虹括号</h2>\n<p>使用各种鲜明的颜色来展示你的括号，效果图如下。可以看出代码层级变得更加清晰了，可以说非常实用友好了！</p>\n<p><img src=\"@source/plugins/assets/rainbow-brackets.png\" alt=\"rainbow-brackets\"></p>\n",
      "image": "https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/image-20211010174138279.png",
      "date_modified": "2022-03-30T14:35:32.787Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "Maven Helper: 解决 Maven 依赖冲突问题",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/maven-helper.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/maven-helper.html",
      "content_html": "<p><strong>Maven Helper</strong> 主要用来分析 Maven 项目的相关依赖，可以帮助我们解决 Maven 依赖冲突问题。</p>\n<p><img src=\"@source/plugins/assets/maver-helper.png\" alt=\"maver-helpe\"></p>\n<div><p>何为依赖冲突?</p>\n<p>说白了就是你的项目使用的 2 个 jar 包引用了同一个依赖 h，并且 h 的版本还不一样,这个时候你的项目就存在两个不同版本的 h。这时 Maven 会依据依赖路径最短优先原则，来决定使用哪个版本的 Jar 包，而另一个无用的 Jar 包则未被使用，这就是所谓的依赖冲突。</p>\n</div>\n<p>大部分情况下，依赖冲突可能并不会对系统造成什么异常，因为 Maven 始终选择了一个 Jar 包来使用。但是，不排除在某些特定条件下，会出现类似找不到类的异常，所以，只要存在依赖冲突，在我看来，最好还是解决掉，不要给系统留下隐患。</p>\n",
      "date_modified": "2022-03-30T14:35:32.788Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "其他",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/others.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/others.html",
      "content_html": "<ol>\n<li><strong>leetcode editor</strong> :提供在线 Leetcode 刷题功能，比较方便我们刷题，不过我试用之后发现有一些小 bug，个人感觉还是直接在网站找题目刷来的痛快一些。</li>\n<li><strong>​A Search with Github</strong>: 直接通过 Github 搜索相关代码。</li>\n<li><strong>stackoverflow</strong>: 选中相关内容后单击右键即可快速跳转到 stackoverflow 。</li>\n<li><strong>CodeStream</strong>: 让 code review 变得更加容易。</li>\n<li><strong>Code screenshots</strong>: 代码片段保存为图片。</li>\n<li><strong>GitToolBox</strong> :Git 工具箱</li>\n<li><strong>OK,​ Gradle!</strong>: 搜索 Java 库用于 Gradle 项目</li>\n<li><strong>Java Stream Debugger</strong>: Java8 Stream 调试器</li>\n<li><strong>EasyCode</strong>: Easycode 可以直接对数据的表生成 entity、controller、service、dao、mapper 无需任何编码，简单而强大。更多内容可以查看这篇文章: <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486205&amp;idx=1&amp;sn=0ff2f87f0d82a1bd9c0c44328ef69435&amp;chksm=cea24536f9d5cc20c6cc7669f0d4167d747fe8b8c05a64546c0162d694aa96044a2862e24b57&amp;token=1862674725&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener noreferrer\">《懒人 IDEA 插件插件:EasyCode 一键帮你生成所需代码~》<ExternalLinkIcon/></a></li>\n<li><strong>JFormDesigner</strong>: Swing GUI 在线编辑器。</li>\n<li><strong>VisualVM Launcher</strong>: Java 性能分析神器。</li>\n<li>......</li>\n</ol>\n",
      "date_modified": "2022-03-30T14:35:32.788Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "SequenceDiagram: 一键可以生成时序图",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/sequence-diagram.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/sequence-diagram.html",
      "content_html": "<p>在平时的学习/工作中，我们会经常面临如下场景:</p>\n<ol>\n<li>阅读别人的代码</li>\n<li>阅读框架源码</li>\n<li>阅读自己很久之前写的代码。</li>\n</ol>\n<p>千万不要觉得工作就是单纯写代码，实际工作中，你会发现你的大部分时间实际都花在了阅读和理解已有代码上。</p>\n<p>为了能够更快更清晰地搞清对象之间的调用关系，我经常需要用到序列图。手动画序列图还是很麻烦费时间的，不过 IDEA 提供了一个叫做<strong>SequenceDiagram</strong> 的插件帮助我们解决这个问题。通过 SequenceDiagram 这个插件，我们一键可以生成时序图。</p>\n<h2 id=\"何为序列图\" tabindex=\"-1\"> 何为序列图？</h2>\n<p>网上对于序列图的定义有很多，我觉得都不太好理解，太抽象了。最神奇的是，大部分文章对于序列图的定义竟然都是一模一样，看来大家是充分发挥了写代码的“精髓”啊！</p>\n<p>我还是简单说一说我的理解吧！不过，说实话，我自己对于 Sequence Diagram 也不是很明朗。下面的描述如有问题和需要完善的地方，还请指出。</p>\n<div><p>序列图</p>\n<p><strong>序列图</strong>（Sequence Diagram），亦称为<strong>循序图</strong>，是一种<a href=\"https://zh.m.wikipedia.org/wiki/UML\" target=\"_blank\" rel=\"noopener noreferrer\">UML<ExternalLinkIcon/></a>行为图。表示系统执行某个方法/操作（如登录操作）时，对象之间的顺序调用关系。</p>\n</div>\n<p>这个顺序调用关系可以这样理解: 你需要执行系统中某个对象 a 提供的方法/操作 login（登录），但是这个对象又依赖了对象 b 提供的方法 getUser(获取用户)。因此，这里就有了 a -&gt; b 调用关系之说。</p>\n<p>再举两个例子来说一下！</p>\n<p>下图是微信支付的业务流程时序图。这个图描述了微信支付相关角色（顾客，商家...）在微信支付场景下，基础支付和支付的的顺序调用关系。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3a48c8d17aea2064ff11b6d3fd1fb2cb.png\" alt=\"\"></p>\n<p>下图是我写的一个 HTTP 框架中的执行某个方法的序列图。这个图描述了我们在调用 <code>InterceptorFactory</code>类的 <code>loadInterceptors()</code> 方法的时候，所涉及到的类之间的调用关系。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70.png\" alt=\"\"></p>\n<p>另外，国内一般更喜欢称呼序列图为&quot;时序图&quot;。</p>\n<ul>\n<li>如果你按照纯翻译的角度来说， sequence 这个单词并无&quot;时间&quot;的意思，只有序列，顺序等意思，因此也有人说“时序图”的说法是不准确的。</li>\n<li>如果从定义角度来说，时序图这个描述是没问题的。因为 Sequence Diagram 中每条消息的触发时机确实是按照时间顺序执行的。</li>\n</ul>\n<p>我觉得称呼 Sequence Diagram 为时序图或者序列图都是没问题的，不用太纠结。</p>\n<h2 id=\"哪些场景下需要查看类的时序图\" tabindex=\"-1\"> 哪些场景下需要查看类的时序图?</h2>\n<p>我们在很多场景下都需要时序图，比如说:</p>\n<ol>\n<li><strong>阅读源码</strong>: 阅读源码的时候，你可能需要查看调用目标方法涉及的相关类的调用关系。特别是在代码的调用层级比较多的时候，对于我们理解源码非常有用。（<em>题外话:实际工作中，大部分时间实际我们都花在了阅读理解已有代码上。</em>）</li>\n<li><strong>技术文档编写</strong>: 我们在写项目介绍文档的时候，为了让别人更容易理解你的代码，你需要根据核心方法为相关的类生成时序图来展示他们之间的调用关系。</li>\n<li><strong>梳理业务流程</strong>: 当我们的系统业务流程比较复杂的时候，我们可以通过序列图将系统中涉及的重要的角色和对象的之间关系可视化出来。</li>\n<li>......</li>\n</ol>\n<h2 id=\"如何使用-idea-根据类中方法生成时序图\" tabindex=\"-1\"> 如何使用 IDEA 根据类中方法生成时序图？</h2>\n<p><strong>通过 SequenceDiagram 这个插件，我们一键可以生成时序图。</strong></p>\n<p>并且，你还可以:</p>\n<ol>\n<li>点击时序图中的类/方法即可跳转到对应的地方。</li>\n<li>从时序图中删除对应的类或者方法。</li>\n<li>将生成的时序图导出为 PNG 图片格式。</li>\n</ol>\n<h3 id=\"安装\" tabindex=\"-1\"> 安装</h3>\n<p>我们直接在 IDEA 的插件市场即可找到这个插件。我这里已经安装好了。</p>\n<div><p>提示</p>\n<p>如果你因为网络问题没办法使用 IDEA 自带的插件市场的话，也可以通过<a href=\"https://plugins.jetbrains.com/idea\" target=\"_blank\" rel=\"noopener noreferrer\">IDEA 插件市场的官网<ExternalLinkIcon/></a>手动下载安装。</p>\n</div>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021165654262.png\" alt=\"\"></p>\n<h3 id=\"简单使用\" tabindex=\"-1\"> 简单使用</h3>\n<ol>\n<li>\n<p>选中方法名（注意不要选类名），然后点击鼠标右键，选择 <strong>Sequence Diagram</strong> 选项即可！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021170110697-20211010211819042.png\" alt=\"\"></p>\n</li>\n<li>\n<p>配置生成的序列图的一些基本的参数比如调用深度之后，我们点击 ok 即可！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/c5040f1105c762ddf8689892913bc02d-20211010211823985.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>你还可以通过生成的时序图来定位到相关的代码，这对于我们阅读源码的时候尤其有帮助！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021171623809-20211010211828759.png\" alt=\"\"></p>\n<p>时序图生成完成之后，你还可以选择将其导出为图片。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021170228723-20211010211832965.png\" alt=\"\"></p>\n",
      "image": "https://img-blog.csdnimg.cn/img_convert/3a48c8d17aea2064ff11b6d3fd1fb2cb.png",
      "date_modified": "2022-03-30T14:35:32.788Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDEA 快捷键相关插件",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/shortcut-key.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/shortcut-key.html",
      "content_html": "<p>相信我！下面这两个一定是 IDEA 必备的插件。</p>\n<h2 id=\"key-promoter-x-快捷键提示\" tabindex=\"-1\"> Key Promoter X: 快捷键提示</h2>\n<p>这个插件的功能主要是<strong>在你本可以使用快捷键操作的地方提醒你用快捷键操作。</strong></p>\n<p>举个例子。我直接点击 tab 栏下的菜单打开 Version Control(版本控制) 的话，这个插件就会提示你可以用快捷键 <code>command+9</code>或者<code>shift+command+9</code>打开。如下图所示。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/Key-Promoter-X1.png\" alt=\"\"></p>\n<p>除了这个很棒的功能之外，这个插件还有一个功能我觉得非常棒。</p>\n<p>它可以展示出哪些快捷键你忘记使用的次数最多！这样的话，你可以给予你忘记次数最多的那些快捷键更多的关注。</p>\n<p>我忘记最多的快捷键是 debug 的时候经常使用的 F8（Step Over）。如下图所示。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/Key-Promoter-X2.png\" alt=\"\"></p>\n<p>关于快捷键，很多人不愿意去记，觉得单纯靠鼠标就完全够了。</p>\n<p>让我来说的话！我觉得如果你偶尔使用一两次 IDEA 的话，你完全没有必要纠结快捷键。</p>\n<p>但是，如果 IDEA 是你开发的主力，你经常需要使用的话，相信我，掌握常用的一些快捷键真的很重要！</p>\n<p>不说多的，<strong>熟练掌握 IDEA 的一些最常见的快捷键，你的工作效率至少提升 30 %。</strong></p>\n<p><strong>除了工作效率的提升之外，使用快捷键会让我们显得更加专业。</strong></p>\n<p>你在使用快捷键进行操作的时候，是很帅，很酷啊！但是，当你用 IDEA 给别人演示一些操作的时候，你使用了快捷键的话，别人可能根本不知道你进行了什么快捷键操作。</p>\n<p><strong>怎么解决这个问题呢？</strong></p>\n<p>很简单！这个时候就轮到 <strong>Presentation Assistant</strong> 这个插件上场了！</p>\n<h2 id=\"presentation-assistant-快捷键展示\" tabindex=\"-1\"> Presentation Assistant: 快捷键展示</h2>\n<p>安装这个插件之后，你使用的快捷键操作都会被可视化地展示出来，非常适合自己在录制视频或者给别人展示代码的时候使用。</p>\n<p>举个例子。我使用快捷键 <code>command+9</code>打开 Version Control ，使用了这个插件之后的效果如下图所示。</p>\n<p><img src=\"@source/plugins/assets/Presentation-Assistant.png\" alt=\"Presentation-Assistant\"></p>\n<p>从上图可以很清晰地看到，IDEA 的底部中间的位置将我刚刚所使用的快捷键给展示了出来。</p>\n<p>并且，<strong>这个插件会展示出 Mac 和 Win/Linux 两种不同的版本的快捷键。</strong></p>\n<p>因此，不论你的操作系统是 Mac 还是 Win/Linux ，这款插件都能满足你的需求。</p>\n",
      "image": "https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/Key-Promoter-X1.png",
      "date_modified": "2022-03-30T14:35:32.788Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDEA 主题推荐",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/themes.html",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/themes.html",
      "content_html": "<p>经常有小伙伴问我: “Guide 哥，你的 IDEA 主题怎么这么好看，能推荐一下不？”。就实在有点不耐烦了，才索性写了这篇文章。</p>\n<p>在这篇文章中，我精选了几个比较是和 Java 编码的 IDEA 主题供小伙伴们选择。另外，我自己用的是 One Dark theme 这款。</p>\n<div><p>注</p>\n<p>以下主题按照使用人数降序排序。</p>\n</div>\n<h2 id=\"material-theme-ui\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/8006-material-theme-ui\" target=\"_blank\" rel=\"noopener noreferrer\">Material Theme UI<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐⭐</p>\n</div>\n<p>这是 IDEA 中使用人数最多的一款主题。</p>\n<p>当你安装完这个插件之后，你会发现这个主题本身又提供了多种相关的主题供你选择。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20/image-20201119182935201.png\" alt=\"\"></p>\n<p><strong>Material Deep Ocean</strong> 这款的效果图如下。默认的字体是真的小，小伙伴们需要自行调整一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20/image-20201119183044068.png\" alt=\"\"></p>\n<h2 id=\"one-dark-theme\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/11938-one-dark-theme\" target=\"_blank\" rel=\"noopener noreferrer\">One Dark theme<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐⭐⭐</p>\n</div>\n<p>我比较喜欢的一款（<em>黄色比较多？</em>）。 没有花里花哨，简单大气，看起来比较舒服。颜色搭配也很棒，适合编码！</p>\n<p>这款主题的效果图如下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20-11/image-20201119180300975.png\" alt=\"\"></p>\n<h2 id=\"gradianto\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/12334-gradianto\" target=\"_blank\" rel=\"noopener noreferrer\">Gradianto<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐⭐⭐</p>\n</div>\n<p>Gradianto 这个主题的目标是在保持页面色彩比较层次分明的情况下，让我们因为代码而疲惫的双眼更加轻松。</p>\n<p>Gradianto 附带了自然界的渐变色，看着挺舒服的。另外，这个主题本身也提供了多种相关的主题供你选择。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20/image-20201119183825753.png\" alt=\"\"></p>\n<p><strong>Gradianto Nature Green</strong> 的效果图如下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20/image-20201119183920889.png\" alt=\"\"></p>\n<h2 id=\"dark-purple-theme\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/12100-dark-purple-theme\" target=\"_blank\" rel=\"noopener noreferrer\">Dark Purple Theme<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐⭐⭐</p>\n</div>\n<p>这是一款紫色色调的深色主题，喜欢紫色的小伙伴不要错过。</p>\n<p>这个主题的效果图如下。个人觉得整体颜色搭配的是比较不错的，适合编码！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20-11/image-20201119184654132.png\" alt=\"\"></p>\n<h2 id=\"hiberbee-theme\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/12118-hiberbee-theme\" target=\"_blank\" rel=\"noopener noreferrer\">Hiberbee Theme<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐⭐⭐</p>\n</div>\n<p>一款受到了 Monokai Pro 和 MacOS Mojave 启发的主题，是一款色彩层次分明的深色主题。</p>\n<p>这个主题的效果图如下。看着也是非常赞！适合编码！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20-11/image-20201119191441248.png\" alt=\"\"></p>\n<p>上面推荐的都是偏暗色系的主题，这里我再推荐两款浅色系的主题。</p>\n<h2 id=\"gray-theme\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/12103-gray-theme\" target=\"_blank\" rel=\"noopener noreferrer\">Gray Theme<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐</p>\n</div>\n<p>这是一款对比度比较低的一款浅色主题，不太适合代码阅读，毕竟这款主题是专门为在 IntelliJ IDE 中使用 Markdown 而设计的。</p>\n<p>这个主题的效果图如下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20-11/image-20201119194512164.png\" alt=\"\"></p>\n<h2 id=\"roboticket-light-theme\" tabindex=\"-1\"> <a href=\"https://plugins.jetbrains.com/plugin/12191-roboticket-light-theme\" target=\"_blank\" rel=\"noopener noreferrer\">Roboticket Light Theme<ExternalLinkIcon/></a></h2>\n<div><p>推荐指数: ⭐⭐⭐</p>\n</div>\n<p>这是一款对比度比较低的浅色主题，不太适合代码阅读。</p>\n<p>这个主题的效果图如下。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/194581c7b72d49b512b12814340f00c8.png\" alt=\"\"></p>\n<h2 id=\"后记\" tabindex=\"-1\"> 后记</h2>\n<p>我个人还是比较偏爱深色系的主题。</p>\n<p>小伙伴们比较喜欢哪款主题呢？可以在评论区简单聊聊不？如果你还有其他比较喜欢的主题也可以在评论区说出来供大家参考哦！</p>\n",
      "image": "https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-20/image-20201119182935201.png",
      "date_modified": "2022-03-30T14:35:32.788Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "使用技巧",
      "url": "https://codingdocs.github.io/awesome-idea/tips/",
      "id": "https://codingdocs.github.io/awesome-idea/tips/",
      "content_html": "<ul>\n<li><a href=\"/tips/efficient-use-guide.html\">IDEA 高效使用指南</a></li>\n<li><a href=\"/tips/refractor-intro.html\">IDEA 高效重构指南</a></li>\n<li><a href=\"/tips/plug-in-development-intro.html\">IDEA 插件开发入门</a></li>\n<li><a href=\"/tips/source-code-reading-skills.html\">IDEA 源码阅读小技巧</a></li>\n</ul>\n",
      "date_modified": "2022-03-30T14:35:32.788Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "IDEA 高效使用教程",
      "url": "https://codingdocs.github.io/awesome-idea/tips/efficient-use-guide.html",
      "id": "https://codingdocs.github.io/awesome-idea/tips/efficient-use-guide.html",
      "content_html": "<p><img src=\"https://img-blog.csdnimg.cn/5a114e95857440b293ad7d297906a1e2.JPG\" alt=\"2021/12/07 - Guide的书桌\"></p>\n<p>大家好，我是 Guide!</p>\n<p>昨晚刷到一篇知乎 370 多点赞的 IDEA 高效使用教程，带着好奇心，点击去一看，好家伙，又是盗用别人原创为自己引流的恶心行为。</p>\n<p>让我纳闷的是，这篇文章的内容质量非常差，而且内容已经过时了（原文是 2018 年写的），竟然还能获得 370 多点赞。我自己非常多文章别人盗发几百点赞，我自己发个位数的点赞，就很奇葩，说多了都是泪......</p>\n<p>于是，我利用昨天晚上和早起的这会时间总结了这篇 <strong>IDEA 高效使用教程</strong> 。希望对大家有帮助！</p>\n<p>本文分为下面 4 部分内容:</p>\n<ol>\n<li>IDEA 高效设置指南</li>\n<li>必备的一些插件推荐</li>\n<li>主题优化</li>\n<li>IDEA 源码阅读技巧</li>\n</ol>\n<h2 id=\"_01-高效设置\" tabindex=\"-1\"> 01 高效设置</h2>\n<p>我们先来讲讲有哪些设置调整之后 IDEA 会更好用。先说明一点: <strong>这里只是根据我个人喜好和习惯的建议，IDEA 的默认配置已经很好用了，具体要不要修改还是要看个人喜好和习惯了。</strong></p>\n<h3 id=\"调整窗口字体显示大小\" tabindex=\"-1\"> 调整窗口字体显示大小</h3>\n<p>巨好用的一个功能！强烈安利！</p>\n<p>勾选上 <em>Preferences / Settings | Editor | General</em> 下的 <em>Change font size with Command + Mouse Wheel</em> 选项之后，我们就可以直接使用 <code>⌘+鼠标滚轮</code>（Mac）/ <code>Ctrl+鼠标滚轮</code>(Windows&amp;Linux)来更改窗口字体的大小</p>\n<p><img src=\"https://img-blog.csdnimg.cn/90540bf7b6a94f2da9a50bd6587d1e58.png\" alt=\"开启更改所有选项卡的字体大小功能\"></p>\n<h3 id=\"字体设置\" tabindex=\"-1\"> 字体设置</h3>\n<p>修改 <em>Preferences / Settings | Editor | Font</em> 选项下的字体设置，字体推荐使用 JetBrains Mono ，字体大小建议 16/18，根据个人需要选择是否需要开启连字。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/348b7d381322420383d0c4fc502b4068.png\" alt=\"字体设置\"></p>\n<p>连字开启之后，代码可读性会更强。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9f7faa76ecbc4865b44460e506cb2f30.png\" alt=\"开启连字之前&amp;之后\"></p>\n<h3 id=\"配置类注释模板\" tabindex=\"-1\"> 配置类注释模板</h3>\n<p>修改 <em>Preferences / Settings | Editor | File adn Code Templates</em> 下的 <code>Class</code> 和 <code>Enum</code> 的模板。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/a17b77401ea743c2bbd84441bf458d15.png\" alt=\"配置类注释模板.\"></p>\n<p>我的日常项目的类注释模板配置为:</p>\n<div><pre><code><span>/**\n * 微信搜 JavaGuide 回复\"面试突击\"即可免费领取个人原创的 Java 面试手册\n * <span>@author</span> Guide哥\n * <span>@date</span> $<span>{</span>YEAR<span>}</span>/$<span>{</span>MONTH<span>}</span>/$<span>{</span>DAY<span>}</span> $<span>{</span>HOUR<span>}</span>:$<span>{</span>MINUTE<span>}</span>\n **/</span>\n<span>public</span> <span>class</span> $<span>{</span>NAME<span>}</span> <span>{</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"优化-live-templates\" tabindex=\"-1\"> 优化 Live Templates</h3>\n<p>IDEA 自带的编码模板我们平时在编码的时候就会经常用到，不知道大家有没有注意。就比如说你输入一个 <code>sout</code> 就可以直接输出一行输出语句 <code>System.out.println();</code> 。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/0fcc5dec656b424898223014864e54a5.png\" alt=\"配置LiveTemplates\"></p>\n<p>你可以根据自己的习惯对 IDEA 自带的编码模板进行修改，并且，你还可以添加新的编码模板来提高编码速度。非常使用！</p>\n<h3 id=\"全局设置-sdk\" tabindex=\"-1\"> 全局设置 SDK</h3>\n<p>修改 <em>File -&gt; New Projects Setup -&gt; Structure...| Project</em> 下的 Project SDK 选项，将其更改为你最常用的 Java 版本。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4136768ead774bd197a6323f726fdcf7.png\" alt=\"全局jdk配置\"></p>\n<p>这样的话，你新导入的项目或者新建的项目都会默认使用这个版本的 SDK。</p>\n<h3 id=\"自动导包-删除无用包\" tabindex=\"-1\"> 自动导包&amp;删除无用包</h3>\n<p>勾选上 <em>Preferences / Settings | Editor | General | Auto Import</em> 下的指定选项即可！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/77d3f95095a94db4b27bcdcc35cc90a2.png\" alt=\"自动导包&amp;删除无用包\"></p>\n<p>这样设置之后，IDEA 会自动帮你导包（唯一确定的时候才会生效）以及删除代码中没用到的包。</p>\n<h3 id=\"显示方法分割线\" tabindex=\"-1\"> 显示方法分割线</h3>\n<p>勾选上 <em>Preferences / Settings | Editor | General | Appearance</em> 下的 Show method separators 选项之后，方法分割线就有了，这会小幅提高代码的可读性。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/显示方法分割线.png\" alt=\"显示方法分割线\"></p>\n<h3 id=\"显示某个文件的提交记录\" tabindex=\"-1\"> 显示某个文件的提交记录</h3>\n<p>在界面左侧空白区域邮件，勾选上 <em>Annotate with Git Blame</em> 即可显示对应文件详细代码提交记录，包括提交信息、提交人、变更文件等信息，非常强大！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8a33b15770b464d9673063f00da8b6ca.png\" alt=\"\"></p>\n<h2 id=\"_02-必备插件\" tabindex=\"-1\"> 02 必备插件</h2>\n<p>好用的插件太多了，我这里只推荐 6 个我最常用的 IDEA 插件。更多插件推荐可以看我写的<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;action=getalbum&amp;album_id=1319419426898329600&amp;scene=173&amp;from_msgid=2247505133&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《IDEA 专题》<ExternalLinkIcon/></a>。</p>\n<h3 id=\"jclasslib-字节码查看神器\" tabindex=\"-1\"> jclasslib: 字节码查看神器</h3>\n<p>使用 <code>jclasslib</code> 不光可以直观地查看某个类对应的字节码文件，还可以查看类的基本信息、常量池、接口、属性、函数等信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/2020-10/image-20201012145646086.png\" alt=\"字节码查看神器\"></p>\n<h3 id=\"tabnine-基于-ai-的代码提示\" tabindex=\"-1\"> Tabnine: 基于 AI 的代码提示</h3>\n<p>Tabnine 的前身是大名鼎鼎的 Codota。我一直在用的一个插件，可以说非常好用了。</p>\n<p>Tabnine 这个插件用于智能代码补全，它基于数百万 Java 程序，能够根据程序上下文提示补全代码。Tabnine 和 IDEA 自带的智能提示两者互补。</p>\n<p>如果你觉得 IDEA 插件安装的太多比较卡顿的话，不用担心！Tabnine 插件还有一个对应的在线网站，在这个网站上你可以根据代码关键字搜索相关代码示例，非常不错！网站地址: https://www.tabnine.com/ 。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/Tabnine.png\" alt=\"Tabnine网页版示意图\"></p>\n<h3 id=\"key-promoter-x-快捷键提示\" tabindex=\"-1\"> Key Promoter X:快捷键提示</h3>\n<p>这个插件的功能主要是<strong>在你本可以使用快捷键操作的地方提醒你用快捷键操作。</strong></p>\n<p>举个例子。我直接点击 tab 栏下的菜单打开 Version Control(版本控制) 的话，这个插件就会提示你可以用快捷键 <code>command+9</code>或者<code>shift+command+9</code>打开。如下图所示。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/Key-Promoter-X1.png\" alt=\"快捷键提示\"></p>\n<p>它还可以展示出哪些快捷键你忘记使用的次数最多！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/Key-Promoter-X2.png\" alt=\"遗忘的快捷键次数统计\"></p>\n<h3 id=\"alibaba-java-code-guidelines-阿里巴巴-java-代码规范\" tabindex=\"-1\"> Alibaba Java Code Guidelines: 阿里巴巴 Java 代码规范</h3>\n<p>阿里巴巴 Java 代码规范，对应的 Github 地址为: <a href=\"https://github.com/alibaba/p3c\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alibaba/p3c (opens new window)<ExternalLinkIcon/></a> 。非常推荐安装！</p>\n<p>安装完成之后建议将与语言替换成中文，提示更加友好一点。</p>\n<p><img src=\"https://javaguide.cn/assets/img/Alibaba-Java-Code-Guidelines2.933b7a93.png\" alt=\"阿里巴巴 Java 代码规范\"></p>\n<p>根据官方描述:</p>\n<blockquote>\n<p>目前这个插件实现了开发手册中的的 53 条规则，大部分基于 PMD 实现，其中有 4 条规则基于 IDEA 实现，并且基于 IDEA <a href=\"https://www.jetbrains.com/help/idea/code-inspection.html\" target=\"_blank\" rel=\"noopener noreferrer\">Inspection (opens new window)<ExternalLinkIcon/></a>实现了实时检测功能。部分规则实现了 Quick Fix 功能，对于可以提供 Quick Fix 但没有提供的，我们会尽快实现，也欢迎有兴趣的同学加入进来一起努力。 目前插件检测有两种模式: 实时检测、手动触发。</p>\n</blockquote>\n<p>上述提到的开发手册也就是在 Java 开发领域赫赫有名的《阿里巴巴 Java 开发手册》。</p>\n<p>这个插件会实时检测出我们的代码不匹配它的规则的地方，并且会给出修改建议。比如我们按照下面的方式去创建线程池的话，这个插件就会帮我们检测出来,如下图所示。</p>\n<p><img src=\"https://javaguide.cn/assets/img/Alibaba-Java-Code-Guidelines1.76918fbe.png\" alt=\"\"></p>\n<h3 id=\"sequencediagram-一键生成时序图\" tabindex=\"-1\"> SequenceDiagram: 一键生成时序图</h3>\n<p><strong>通过 SequenceDiagram 这个插件，我们一键可以生成时序图。</strong> 并且，你还可以:</p>\n<ol>\n<li>点击时序图中的类/方法即可跳转到对应的地方。</li>\n<li>从时序图中删除对应的类或者方法。</li>\n<li>将生成的时序图导出为 PNG 图片格式。</li>\n</ol>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021171623809-20211010211828759.png\" alt=\"一键生成时序图\"></p>\n<h3 id=\"save-actions-优化文件保存\" tabindex=\"-1\"> Save Actions: 优化文件保存</h3>\n<p>这个插件可以帮助我们在保存文件的时候:</p>\n<ol>\n<li>优化导入；</li>\n<li>格式化代码；</li>\n<li>执行一些 quick fix</li>\n<li>......</li>\n</ol>\n<h3 id=\"rainbow-brackets-彩虹括号\" tabindex=\"-1\"> Rainbow Brackets: 彩虹括号</h3>\n<p>使用各种鲜明的颜色来展示你的括号，效果图如下。可以看出代码层级变得更加清晰了，可以说非常实用友好了！</p>\n<p><img src=\"https://javaguide.cn/assets/img/rainbow-brackets.4eff901b.png\" alt=\"彩虹括号\"></p>\n<h2 id=\"_03-主题优化\" tabindex=\"-1\"> 03 主题优化</h2>\n<p>在<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247495661&amp;idx=1&amp;sn=3e0b33b4dc41985344c8aafcccc6bb13&amp;chksm=cea1a026f9d62930b88711da89145080ca653f692bd8b42fed8c2cc1e8381abf76f797813fde&amp;scene=178&amp;cur_album_id=1319419426898329600#rd\" target=\"_blank\" rel=\"noopener noreferrer\">这几款 IDEA 主题也太好看了吧！！<ExternalLinkIcon/></a>这篇文章中，我精选了几个比较适合 Java 编码的 IDEA 主题供小伙伴们选择（我自己用的是 One Dark theme 这款）。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/4577a98272094d1d96f092e50d3d6d5e.png\" alt=\"One Dark theme \"></p>\n<p>挺难受的，本着一片好意发这篇文章，结果还被喷了，很多小伙伴说我审美不行，还有一些小伙伴说花里胡哨的，没有原本自带的主题好看。</p>\n<p>萝卜白菜各有所爱吧！保持一个包容的心态不是很难吧？你可以不装任何插件，但不要认为别人装插件就是多余，IDEA 的插件就是 IDEA 的一大灵魂所在，这点事无法否认的事实。</p>\n<h2 id=\"_04-idea-源码阅读技巧\" tabindex=\"-1\"> 04 IDEA 源码阅读技巧</h2>\n<p>在 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505133&amp;idx=1&amp;sn=5f722cb29c655203b27cb38684503390&amp;chksm=cea19b26f9d61230d87df97c8efd892ff6e3f7be77e6ec104c8f823a9a0c7dc7232f03b8351b&amp;scene=178&amp;cur_album_id=1319419426898329600#rd\" target=\"_blank\" rel=\"noopener noreferrer\">真香！用 IDEA 神器看源码，效率真高！<ExternalLinkIcon/></a> 这篇文章中，我介绍了自己平时看源码的时候常用的快捷键/小技巧！非常好用！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/8a9024040e8c431796aa5427efcf35e5.png\" alt=\"IDEA源码阅读技巧\"></p>\n<p>掌握这些快捷键/小技巧，使用 IDEA 看源码的效率提升一个等级！</p>\n",
      "image": "https://img-blog.csdnimg.cn/5a114e95857440b293ad7d297906a1e2.JPG",
      "date_modified": "2022-03-30T14:35:32.789Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDEA 插件开发入门",
      "url": "https://codingdocs.github.io/awesome-idea/tips/plug-in-development-intro.html",
      "id": "https://codingdocs.github.io/awesome-idea/tips/plug-in-development-intro.html",
      "content_html": "<p>我这个人没事就喜欢推荐一些好用的 <a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;album_id=1319419426898329600&amp;__biz=Mzg2OTA0Njk0OA==#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">IDEA 插件<ExternalLinkIcon/></a>给大家。这些插件极大程度上提高了我们的生产效率以及编码舒适度。</p>\n<p><strong>不知道大家有没有想过自己开发一款 IDEA 插件呢？</strong></p>\n<p>我自己想过，但是没去尝试过。刚好有一位读者想让我写一篇入门 IDEA 开发的文章，所以，我在周末就花了一会时间简单了解一下。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201118071711216.png\" alt=\"\"></p>\n<p>不过，<strong>这篇文章只是简单带各位小伙伴入门一下 IDEA 插件开发</strong>，个人精力有限，暂时不会深入探讨太多。如果你已经有 IDEA 插件开发的相关经验的话，这篇文章就可以不用看了，因为会浪费你 3 分钟的时间。</p>\n<p>好的废话不多说！咱们直接开始!</p>\n<h2 id=\"_01-新建一个基于-gradle-的插件项目\" tabindex=\"-1\"> 01 新建一个基于 Gradle 的插件项目</h2>\n<p>这里我们基于 Gradle 进行插件开发，这也是 IntelliJ 官方的推荐的插件开发解决方案。</p>\n<p><strong>第一步，选择 Gradle 项目类型并勾选上相应的依赖。</strong></p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/1.png\" alt=\"选择 Gradle 项目类型并勾选上相应的依赖\"></p>\n<p><strong>第二步，填写项目相关的属性比如 GroupId、ArtifactId。</strong></p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/2.png\" alt=\"填写项目相关的属性\"></p>\n<p><strong>第三步，静静等待项目下载相关依赖。</strong></p>\n<p>第一次创建 IDEA 插件项目的话，这一步会比较慢。因为要下载 IDEA 插件开发所需的 SDK 。</p>\n<h2 id=\"_02-插件项目结构概览\" tabindex=\"-1\"> 02 插件项目结构概览</h2>\n<p>新建完成的项目结构如下图所示。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/插件项目结构概览.png\" alt=\"插件项目结构概览\"></p>\n<p>这里需要额外注意的是下面这两个配置文件。</p>\n<p><strong><code>plugin.xml</code>: 插件的核心配置文件。通过它可以配置插件名称、插件介绍、插件作者信息、Action 等信息。</strong></p>\n<div><pre><code><span><span><span>&lt;</span>idea-plugin</span><span>></span></span>\n    <span><span><span>&lt;</span>id</span><span>></span></span>github.javaguide.my-first-idea-plugin<span><span><span>&lt;/</span>id</span><span>></span></span>\n    <span>&lt;!--插件的名称--></span>\n    <span><span><span>&lt;</span>name</span><span>></span></span>Beauty<span><span><span>&lt;/</span>name</span><span>></span></span>\n    <span>&lt;!--插件的作者相关信息--></span>\n    <span><span><span>&lt;</span>vendor</span> <span>email</span><span><span>=</span><span>\"</span>koushuangbwcx@163.com<span>\"</span></span> <span>url</span><span><span>=</span><span>\"</span>https://github.com/Snailclimb<span>\"</span></span><span>></span></span>JavaGuide<span><span><span>&lt;/</span>vendor</span><span>></span></span>\n    <span>&lt;!--插件的介绍--></span>\n    <span><span><span>&lt;</span>description</span><span>></span></span><span>&lt;![CDATA[\n     Guide哥代码开发的第一款IDEA 插件&lt;br>\n    &lt;em>这尼玛是什么垃圾插件！！！&lt;/em>\n    ]]></span><span><span><span>&lt;/</span>description</span><span>></span></span>\n\n    <span>&lt;!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html\n         on how to target different products --></span>\n    <span><span><span>&lt;</span>depends</span><span>></span></span>com.intellij.modules.platform<span><span><span>&lt;/</span>depends</span><span>></span></span>\n\n    <span><span><span>&lt;</span>extensions</span> <span>defaultExtensionNs</span><span><span>=</span><span>\"</span>com.intellij<span>\"</span></span><span>></span></span>\n        <span>&lt;!-- Add your extensions here --></span>\n    <span><span><span>&lt;/</span>extensions</span><span>></span></span>\n\n    <span><span><span>&lt;</span>actions</span><span>></span></span>\n        <span>&lt;!-- Add your actions here --></span>\n    <span><span><span>&lt;/</span>actions</span><span>></span></span>\n<span><span><span>&lt;/</span>idea-plugin</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p><strong><code>build.gradle</code>: 项目依赖配置文件。通过它可以配置项目第三方依赖、插件版本、插件版本更新记录等信息。</strong></p>\n<div><pre><code>plugins <span>{</span>\n    id <span>'java'</span>\n    id <span>'org.jetbrains.intellij'</span> version <span>'0.6.3'</span>\n<span>}</span>\n\ngroup <span>'github.javaguide'</span>\n<span>// 当前插件版本</span>\nversion <span>'1.0-SNAPSHOT'</span>\n\nrepositories <span>{</span>\n    <span>mavenCentral</span><span>(</span><span>)</span>\n<span>}</span>\n\n<span>// 项目依赖</span>\ndependencies <span>{</span>\n    testCompile group<span>:</span> <span>'junit'</span><span>,</span> name<span>:</span> <span>'junit'</span><span>,</span> version<span>:</span> <span>'4.12'</span>\n<span>}</span>\n\n<span>// See https://github.com/JetBrains/gradle-intellij-plugin/</span>\n<span>// 当前开发该插件的 IDEA 版本</span>\nintellij <span>{</span>\n    version <span>'2020.1.2'</span>\n<span>}</span>\npatchPluginXml <span>{</span>\n    <span>// 版本更新记录</span>\n    changeNotes <span>\"\"\"\n      Add change notes here.&lt;br>\n      &lt;em>most HTML tags may be used&lt;/em>\"\"\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>没有开发过 IDEA 插件的小伙伴直接看这两个配置文件内容可能会有点蒙。所以，我专门找了一个 IDEA 插件市场提供的现成插件来说明一下。小伙伴们对照下面这张图来看下面的配置文件内容就非常非常清晰了。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/iShot2020-11-13 16.15.53.png\" alt=\"插件信息\"></p>\n<p>这就非常贴心了！如果这都不能让你点赞，我要这文章有何用!</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006BkP2Hly1fsxxff7zd9g304g0480td.gif\" alt=\"\"></p>\n<h2 id=\"_03-手动创建-action\" tabindex=\"-1\"> 03 手动创建 Action</h2>\n<p>我们可以把 Action 看作是 IDEA 提供的事件响应处理器，通过 Action 我们可以自定义一些事件处理逻辑/动作。比如说你点击某个菜单的时候，我们进行一个展示对话框的操作。</p>\n<p><strong>第一步，右键 <code>java</code> 目录并选择 new 一个 Action</strong></p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/新建action (1).png\" alt=\"\"></p>\n<p><strong>第二步，配置 Action 相关信息比如展示名称。</strong></p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/配置动作属性 (1).png\" alt=\"配置动作属性 (1)\"></p>\n<p>创建完成之后，我们的 <code>plugin.xml</code> 的 <code>&lt;actions&gt;</code>节点下会自动生成我们刚刚创建的 Action 信息:</p>\n<div><pre><code><span><span><span>&lt;</span>actions</span><span>></span></span>\n    <span>&lt;!-- Add your actions here --></span>\n    <span><span><span>&lt;</span>action</span> <span>id</span><span><span>=</span><span>\"</span>test.hello<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>HelloAction<span>\"</span></span> <span>text</span><span><span>=</span><span>\"</span>Hello<span>\"</span></span> <span>description</span><span><span>=</span><span>\"</span>IDEA 插件入门<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>add-to-group</span> <span>group-id</span><span><span>=</span><span>\"</span>ToolsMenu<span>\"</span></span> <span>anchor</span><span><span>=</span><span>\"</span>first<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;/</span>action</span><span>></span></span>\n<span><span><span>&lt;/</span>actions</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>并且 <code>java</code> 目录下会生成一个叫做 <code>HelloAction</code> 的类。这个类继承了 <code>AnAction</code> ，并覆盖了 <code>actionPerformed()</code> 方法。这个 <code>actionPerformed</code> 方法就好比 JS 中的 <code>onClick</code> 方法，会在你点击的时候触发对应的动作。</p>\n<p>我简单对 <code>actionPerformed</code> 方法进行了修改，添加了一行代码。这行代码很简单，就是显示 1 个对话框并展示一些信息。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>HelloAction</span> <span>extends</span> <span>AnAction</span> <span>{</span>\n\n    <span>@Override</span>\n    <span>public</span> <span>void</span> <span>actionPerformed</span><span>(</span><span>AnActionEvent</span> e<span>)</span> <span>{</span>\n        <span>//显示对话框并展示对应的信息</span>\n        <span>Messages</span><span>.</span><span>showInfoMessage</span><span>(</span><span>\"素材不够，插件来凑！\"</span><span>,</span> <span>\"Hello\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>另外，我们上面也说了，每个动作都会归属到一个 Group 中，这个 Group 可以简单看作 IDEA 中已经存在的菜单。</p>\n<p>举个例子。我上面创建的 Action 的所属 Group 是 <strong>ToolsMenu(Tools)</strong> 。这样的话，我们创建的 Action 所在的位置就在 Tools 这个菜单下。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201113192255689.png\" alt=\"\"></p>\n<p>再举个例子。加入我上面创建的 Action 所属的 Group 是<strong>MainMenu</strong> （IDEA 最上方的主菜单栏）下的 <strong>FileMenu(File)</strong> 的话。</p>\n<div><pre><code><span><span><span>&lt;</span>actions</span><span>></span></span>\n    <span>&lt;!-- Add your actions here --></span>\n    <span><span><span>&lt;</span>action</span> <span>id</span><span><span>=</span><span>\"</span>test.hello<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>HelloAction<span>\"</span></span> <span>text</span><span><span>=</span><span>\"</span>Hello<span>\"</span></span> <span>description</span><span><span>=</span><span>\"</span>IDEA 插件入门<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>add-to-group</span> <span>group-id</span><span><span>=</span><span>\"</span>FileMenu<span>\"</span></span> <span>anchor</span><span><span>=</span><span>\"</span>first<span>\"</span></span><span>/></span></span>\n    <span><span><span>&lt;/</span>action</span><span>></span></span>\n<span><span><span>&lt;/</span>actions</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>我们创建的 Action 所在的位置就在 File 这个菜单下。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201113201634643.png\" alt=\"\"></p>\n<h2 id=\"_04-验收成果\" tabindex=\"-1\"> 04 验收成果</h2>\n<p>点击 <code>Gradle -&gt; Tasks -&gt; intellij -&gt; runIde</code> 就会启动一个默认了这个插件的 IDEA。然后，你可以在这个 IDEA 上实际使用这个插件了。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201118075912490.png\" alt=\"点击 runIde 就会启动一个默认了这个插件的 IDEA\"></p>\n<p>效果如下:</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201118080358764.png\" alt=\"点击 runIde 就会启动一个默认了这个插件的 IDEA\"></p>\n<p>我们点击自定义的 Hello Action 的话就会弹出一个对话框并展示出我们自定义的信息。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/IDEA插件HelloWorld.png\" alt=\"IDEA 插件HelloWorld\"></p>\n<h2 id=\"_05-完善一下\" tabindex=\"-1\"> 05 完善一下</h2>\n<p>想要弄点界面花里胡哨一下， 我们还可以通过 Swing 来写一个界面。</p>\n<p>这里我们简单实现一个聊天机器人。代码的话，我是直接参考的我大二刚学 Java 那会写的一个小项目（<em>当时写的代码实在太烂了！就很菜！</em>）。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201114100213337.png\" alt=\"\"></p>\n<p>首先，你需要在<a href=\"http://www.tuling123.com/\" title=\"图灵机器人官网\" target=\"_blank\" rel=\"noopener noreferrer\">图灵机器人官网<ExternalLinkIcon/></a>申请一个机器人。（<em>其他机器人也一样，感觉这个图灵机器人没有原来好用了，并且免费调用次数也不多</em>）</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201118075453172.png\" alt=\"\"></p>\n<p>然后，简单写一个方法来请求调用机器人。由于代码比较简单，我这里就不放出来了，大家简单看一下效果就好。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201118075803163.png\" alt=\"\"></p>\n<h2 id=\"_06-打包分发\" tabindex=\"-1\"> 06 打包分发</h2>\n<p>插件写好之后，如果我们想把插件分享给小伙伴使用的话要怎么做呢。</p>\n<h3 id=\"首先-我们要打包插件\" tabindex=\"-1\"> 首先，我们要打包插件</h3>\n<p>执行 Gradle -&gt; Tasks -&gt; intellij -&gt; buildPlugin</p>\n<p>执行完成后，项目中会生成一个 build 文件夹，点击进入后找到 distributions 文件夹，里面会出现一个 .zip 结尾的压缩包，里面打包了插件所需要的依赖、配置文件等。</p>\n<h3 id=\"其次-分发插件\" tabindex=\"-1\"> 其次，分发插件</h3>\n<p>打开 IDEA，在 Settings -&gt; Plugins -&gt; 点击小齿轮后选择 Install Plugin From Disk</p>\n<p><img src=\"@source/tips/assets/install-plugin-from-disk.png\" alt=\"install-plugin-from-disk\"></p>\n<h3 id=\"最后-提交至官网\" tabindex=\"-1\"> 最后，提交至官网</h3>\n<p>这步并不是必须的，如果你想把你的插件发布到官网上，别人直接可以在 <a href=\"https://plugins.jetbrains.com/\" target=\"_blank\" rel=\"noopener noreferrer\">应用市场<ExternalLinkIcon/></a> 中搜到你的插件的话可以做这步。</p>\n<h2 id=\"_07-深入学习\" tabindex=\"-1\"> 07 深入学习</h2>\n<p>如果你想要深入学习的 IDEA 插件的话，可以看一下 <a href=\"https://jetbrains.org/intellij/sdk/docs/basics/basics.html\" target=\"_blank\" rel=\"noopener noreferrer\">官网文档<ExternalLinkIcon/></a>。</p>\n<p>这方面的资料还是比较少的。除了官方文档的话，你还可以简单看看下面这几篇文章:</p>\n<ul>\n<li><a href=\"https://developer.aliyun.com/article/777850?spm=a2c6h.12873581.0.dArticle777850.118d6446r096V4&amp;groupCode=alitech\" title=\"8 条经验轻松上手 IDEA 插件开发\" target=\"_blank\" rel=\"noopener noreferrer\">8 条经验轻松上手 IDEA 插件开发<ExternalLinkIcon/></a></li>\n<li><a href=\"https://blog.xiaohansong.com/idea-plugin-development.html\" title=\"IDEA 插件开发入门教程\" target=\"_blank\" rel=\"noopener noreferrer\">IDEA 插件开发入门教程<ExternalLinkIcon/></a></li>\n</ul>\n<h2 id=\"_08-后记\" tabindex=\"-1\"> 08 后记</h2>\n<p>我们开发 IDEA 插件主要是为了让 IDEA 更加好用，比如有些框架使用之后可以减少重复代码的编写、有些主题类型的插件可以让你的 IDEA 更好看。</p>\n<p>我这篇文章的这个案例说实话只是为了让大家简单入门一下 IDEA 开发，没有任何实际应用意义。<strong>如果你想要开发一个不错的 IDEA 插件的话，还要充分发挥想象，利用 IDEA 插件平台的能力。</strong></p>\n<h2 id=\"常见问题一-jdk-版本过低\" tabindex=\"-1\"> 常见问题一: JDK 版本过低</h2>\n<p>创建好项目之后，运行 Gradle，出现如下报错</p>\n<div><pre><code>FAILURE: Build failed with an exception.\n\n* What went wrong:\nA problem occurred configuring root project 'string-template-error-scanner'.\n> Could not resolve all artifacts for configuration ':classpath'.\n   > Could not resolve org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.4.0.\n     Required by:\n         project: > org.jetbrains.intellij:org.jetbrains.intellij.gradle.plugin:1.4.0\n      > Unable to find a matching variant of org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.4.0:\n          - Variant 'apiElements' capability org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.4.0:\n              - Incompatible attributes:\n                  - Required org.gradle.jvm.version '8' and found incompatible value '11'.\n                  - Required org.gradle.usage 'java-runtime' and found incompatible value 'java-api'.\n              - Other attributes:\n                  - Found org.gradle.category 'library' but wasn't required.\n                  - Required org.gradle.dependency.bundling 'external' and found compatible value 'external'.\n                  - Found org.gradle.jvm.environment 'standard-jvm' but wasn't required.\n                  - Required org.gradle.libraryelements 'jar' and found compatible value 'jar'.\n                  - Found org.gradle.status 'release' but wasn't required.\n                  - Found org.jetbrains.kotlin.platform.type 'jvm' but wasn't required.\n          - Variant 'runtimeElements' capability org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.4.0:\n              - Incompatible attribute:\n                  - Required org.gradle.jvm.version '8' and found incompatible value '11'.\n              - Other attributes:\n                  - Found org.gradle.category 'library' but wasn't required.\n                  - Required org.gradle.dependency.bundling 'external' and found compatible value 'external'.\n                  - Found org.gradle.jvm.environment 'standard-jvm' but wasn't required.\n                  - Required org.gradle.libraryelements 'jar' and found compatible value 'jar'.\n                  - Found org.gradle.status 'release' but wasn't required.\n                  - Required org.gradle.usage 'java-runtime' and found compatible value 'java-runtime'.\n                  - Found org.jetbrains.kotlin.platform.type 'jvm' but wasn't required.\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 94ms\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><blockquote>\n<p>原因分析: 一般情况下，我们都是使用 JDK8 进行开发，但是新版的 IDEA 插件的编译需要使用 JAVA11 版本以上，因此要把 JDK8 换成 JDK11。（设置方法: 左上角点击 Settings -&gt; Build, Execution, Deployment, Build Tools -&gt; Gradle，在下面找到 Gradle JVM: 改成 Java11 再次运行 Gradle 即可）</p>\n</blockquote>\n<h2 id=\"常见问题二-无法创建-org-jetbrains-intellij-utils-archiveutils-的实例\" tabindex=\"-1\"> 常见问题二: 无法创建 org.jetbrains.intellij.utils.ArchiveUtils 的实例</h2>\n<div><pre><code>Build file 'D:\\project\\string-template-error-scanner\\build.gradle' line: 3\n\nAn exception occurred applying plugin request [id: 'org.jetbrains.intellij', version: '1.4.0']\n> Failed to apply plugin [id 'org.jetbrains.intellij']\n   > Could not create an instance of type org.jetbrains.intellij.utils.ArchiveUtils.\n      > Could not generate a decorated class for type ArchiveUtils.\n         > org/gradle/api/file/ArchiveOperations\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p>原因分析: 这个问题我在 StackOverFlow、CSDN 等等网站搜了一大圈都从根源上找到怎么解决（知道的小伙伴可以编辑此页和我说一下~）</p>\n<p>最后通过修改 <code>build.gradle</code> 中 org.jetbrains.intellij 的版本解决的，我创建好项目之后版本是 1.4.0，换成 0.6.3，再重新运行一次 Gradle 就可以了</p>\n</blockquote>\n",
      "image": "https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/image-20201118071711216.png",
      "date_modified": "2022-03-30T14:35:32.789Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDEA 重构入门",
      "url": "https://codingdocs.github.io/awesome-idea/tips/refractor-intro.html",
      "id": "https://codingdocs.github.io/awesome-idea/tips/refractor-intro.html",
      "content_html": "<p>我们在使用 IDEA 进行重构之前，先介绍一个方便我们进行重构的快捷键: <code>ctrl+t(mac)/ctrl+shift+alt+t</code>（如果忘记快捷键的话，鼠标右键也能找到重构选项），使用这个快捷键可以快速调出常用重构的选项，如下图所示:</p>\n<p><img src=\"@source/tips/assets/refractor-help.png\" alt=\"\"></p>\n<h2 id=\"重命名-rename\" tabindex=\"-1\"> 重命名(rename)</h2>\n<p>快捷键: **Shift + F6(mac) / Shift + F6(windows/Linux): ** 对类、变量或者方法名重命名。</p>\n<p><img src=\"@source/tips/assets/rename.gif\" alt=\"重命名\"></p>\n<h2 id=\"提取相关重构手段\" tabindex=\"-1\"> 提取相关重构手段</h2>\n<p>这部分的快捷键实际很好记忆，我是这样记忆的:</p>\n<p>前面两个键位是 <code>command + option(mac) / ctrl + alt (Windows/Linux)</code> 是固定的，只有后面一个键位会变比如 Extract constant (提取变量)就是 c（constant）、Extract variable (提取变量)就是 v(variable)。</p>\n<h3 id=\"提取常量-extract-constant\" tabindex=\"-1\"> 提取常量(extract constant)</h3>\n<ol>\n<li><strong>使用场景</strong>: 提取未经过定义就直接出现的常量。提取常量使得你的编码更易读，避免硬编码。</li>\n<li>**快捷键: ** <code>command + option+ c(mac)/ ctrl + alt + c(Windows/Linux)</code></li>\n</ol>\n<p>**示例: **</p>\n<p><img src=\"@source/tips/assets/exact/extract-constant.gif\" alt=\"\"></p>\n<h3 id=\"提取参数-exact-parameter\" tabindex=\"-1\"> 提取参数(exact parameter﻿)</h3>\n<ol>\n<li><strong>使用场景</strong>: 提取参数到方法中。</li>\n<li>**快捷键: ** <code>command + option+ p(mac)/ ctrl + alt + p(Windows/Linux)</code></li>\n</ol>\n<p><img src=\"@source/tips/assets/exact/exact-parameter.gif\" alt=\"\"></p>\n<h3 id=\"提取变量-exact-variable\" tabindex=\"-1\"> 提取变量(exact variable)</h3>\n<ol>\n<li><strong>使用场景</strong>: 提取多次出现的表达式。</li>\n<li>**快捷键: ** <code>command + option+ v(mac) / ctrl + alt + v(Windows/Linux) </code></li>\n</ol>\n<p>**示例: **</p>\n<p><img src=\"@source/tips/assets/exact/exact-variable.gif\" alt=\"\"></p>\n<h3 id=\"提取属性-exact-field\" tabindex=\"-1\"> 提取属性(exact field)</h3>\n<ol>\n<li><strong>使用场景</strong>: 把当前表达式提取成为类的一个属性。</li>\n<li>**快捷键: ** <code>command + option+ f(mac) / ctrl + alt + f(Windows/Linux) </code></li>\n</ol>\n<p>**示例: **</p>\n<p><img src=\"@source/tips/assets/exact/exact-field.gif\" alt=\"\"></p>\n<p>**示例: **</p>\n<p><img src=\"@source/tips/assets/exact/exact-variable.gif\" alt=\"\"></p>\n<h3 id=\"提取方法-exact-method\" tabindex=\"-1\"> 提取方法(exact method)</h3>\n<ol>\n<li><strong>使用场景</strong>: 1 个或者多个表达式可以提取为一个方法。 提取方法也能使得你的编码更易读，更加语义化。</li>\n<li>**快捷键: ** <code>command + option+ m(mac)/ ctrl + alt + m(Windows/Linux)</code></li>\n</ol>\n<p>**示例: **</p>\n<p><img src=\"@source/tips/assets/exact/exact-method.gif\" alt=\"\"></p>\n<h3 id=\"提取接口-exact-interface\" tabindex=\"-1\"> 提取接口(exact interface)</h3>\n<ol>\n<li><strong>使用场景</strong>: 想要把一个类中的 1 个或多个方法提取到一个接口中的时候。</li>\n<li>**快捷键: ** <code>command + option+ m(mac)/ ctrl + alt + m(Windows/Linux)</code></li>\n</ol>\n<p>**示例: **</p>\n<p><img src=\"@source/tips/assets/exact/exact-interface.gif\" alt=\"\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.789Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDEA 源码阅读技巧",
      "url": "https://codingdocs.github.io/awesome-idea/tips/source-code-reading-skills.html",
      "id": "https://codingdocs.github.io/awesome-idea/tips/source-code-reading-skills.html",
      "content_html": "<p>项目有个新来了一个小伙伴，他看我查看项目源代码的时候，各种骚操作“花里胡哨”的。于是他向我请教，想让我分享一下我平时使用 IDEA 看源码的小技巧。</p>\n<h2 id=\"基本操作\" tabindex=\"-1\"> 基本操作</h2>\n<p>这一部分的内容主要是一些我平时看源码的时候常用的快捷键/小技巧！非常好用！</p>\n<p>掌握这些快捷键/小技巧，看源码的效率提升一个等级！</p>\n<h3 id=\"查看当前类的层次结构\" tabindex=\"-1\"> 查看当前类的层次结构</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐⭐</td>\n<td><code>Ctrl + H</code></td>\n</tr>\n</tbody>\n</table>\n<p>平时，我们阅读源码的时候，经常需要查看类的层次结构。就比如我们遇到抽象类或者接口的时候，经常需要查看其被哪些类实现。</p>\n<p>拿 Spring 源码为例，<code>BeanDefinition</code> 是一个关于 Bean 属性/定义的接口。</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>BeanDefinition</span> <span>extends</span> <span>AttributeAccessor</span><span>,</span> <span>BeanMetadataElement</span> <span>{</span>\n  <span>.</span><span>.</span><span>.</span><span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果我们需要查看 <code>BeanDefinition</code> 被哪些类实现的话，只需要把鼠标移动到 <code>BeanDefinition</code> 类名上，然后使用快捷键 <code>Ctrl + H</code> 即可。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135533686.png\" alt=\"\"></p>\n<p>同理，如果你想查看接口 <code>BeanDefinition</code> 继承的接口 <code>AttributeAccessor</code> 被哪些类实现的话，只需要把鼠标移动到 <code>AttributeAccessor</code> 类名上，然后使用快捷键 <code>Ctrl + H</code> 即可。</p>\n<h3 id=\"查看类结构\" tabindex=\"-1\"> 查看类结构</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐</td>\n<td><code>Alt + 7</code>(Win) / <code>Command +7</code> （Mac）</td>\n</tr>\n</tbody>\n</table>\n<p>类结构可以让我们快速了解到当前类的方法、变量/常量，非常使用！</p>\n<p>我们在对应的类的任意位置使用快捷键 <code>Alt + 7</code>(Win) / <code>Command +7</code> （Mac）即可。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135552183.png\" alt=\"\"></p>\n<h3 id=\"快速检索类\" tabindex=\"-1\"> 快速检索类</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐⭐</td>\n<td><code>Ctrl + N</code> (Win) / <code>Command + O</code> （Mac）</td>\n</tr>\n</tbody>\n</table>\n<p>使用快捷键 <code>Ctrl + N</code> (Win) / <code>Command + O</code> （Mac）可以快速检索类/文件。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135629367.png\" alt=\"\"></p>\n<h3 id=\"关键字检索\" tabindex=\"-1\"> 关键字检索</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐⭐</td>\n<td>见下文</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当前文件下检索: <code>Ctrl + F</code> (Win) / <code>Command + F</code> （Mac）</li>\n<li>全局的文本检索: <code>Ctrl + Shift + F</code> (Win) / <code>Command + Shift + F</code> （Mac）</li>\n</ul>\n<h3 id=\"查看方法-类的实现类\" tabindex=\"-1\"> 查看方法/类的实现类</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐</td>\n<td><code>Ctrl + Alt + B</code> (Win) / <code>Command + Alt + B</code> (Mac)</td>\n</tr>\n</tbody>\n</table>\n<p>如果我们想直接跳转到某个方法/类的实现类，直接在方法名或者类名上使用快捷键 <code>Ctrl + Alt + B/鼠标左键</code> (Win) / <code>Command + Alt + B/鼠标左键</code> (Mac) 即可。</p>\n<p>如果对应的方法/类只有一个实现类的话，会直接跳转到对应的实现类。</p>\n<p>比如 <code>BeanDefinition</code> 接口的 <code>getBeanClassName()</code> 方法只被 <code>AbstractBeanDefinition</code> 抽象类实现，我们对这个方法使用快捷键就可以直接跳转到 <code>AbstractBeanDefinition</code> 抽象类中对应的实现方法。</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>BeanDefinition</span> <span>extends</span> <span>AttributeAccessor</span><span>,</span> <span>BeanMetadataElement</span> <span>{</span>\n  <span>@Nullable</span>\n\t<span>String</span> <span>getBeanClassName</span><span>(</span><span>)</span><span>;</span>\n  <span>.</span><span>.</span><span>.</span><span>.</span><span>.</span><span>.</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果对应的方法/类有多个实现类的话，IDEA 会弹出一个选择框让你选择。</p>\n<p>比如 <code>BeanDefinition</code> 接口的 <code>getParentName()</code> 方法就有多个不同的实现。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135703164.png\" alt=\"\"></p>\n<h3 id=\"查看方法被使用的情况\" tabindex=\"-1\"> 查看方法被使用的情况</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐</td>\n<td><code>Alt + F7</code></td>\n</tr>\n</tbody>\n</table>\n<p>我们可以通过直接在方法名上使用快捷键 <code>Alt + F7</code> 来查看这个方法在哪些地方被调用过。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135712962.png\" alt=\"\"></p>\n<h3 id=\"查看最近使用的文件\" tabindex=\"-1\"> 查看最近使用的文件</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐⭐</td>\n<td><code>Ctrl + E</code>(Win) / <code>Command +E</code> （Mac）</td>\n</tr>\n</tbody>\n</table>\n<p>你可以通过快捷键 <code>Ctrl + E</code>(Win) / <code>Command +E</code> （Mac）来显示 IDEA 最近使用的一些文件。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135733816.png\" alt=\"\"></p>\n<h3 id=\"查看图表形式的类继承链\" tabindex=\"-1\"> 查看图表形式的类继承链</h3>\n<table>\n<thead>\n<tr>\n<th>使用频率</th>\n<th>相关快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⭐⭐⭐⭐</td>\n<td>相关快捷键较多，不建议记</td>\n</tr>\n</tbody>\n</table>\n<p>点击类名 <strong>右键</strong> ，选择 <strong>Shw Diagrams</strong> 即可查看图表形式的类继承链。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135745518.png\" alt=\"\"></p>\n<p>你还可以对图表进行一些操作。比如，你可以点击图表中具体的类 <strong>右键</strong>，然后选择显示它的实现类或者父类。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135757163.png\" alt=\"\"></p>\n<p>再比如你还可以选择是否显示类中的属性、方法、内部类等等信息。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135902827.png\" alt=\"\"></p>\n<p>如果你想跳转到对应类的源码的话，直接点击图表中具体的类 <strong>右键</strong> ，然后选择 <strong>Jump to Source</strong> 。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135807668.png\" alt=\"\"></p>\n<h2 id=\"插件推荐\" tabindex=\"-1\"> 插件推荐</h2>\n<h3 id=\"一键生成方法的序列图\" tabindex=\"-1\"> 一键生成方法的序列图</h3>\n<p><strong>序列图</strong>（Sequence Diagram），亦称为<strong>循序图</strong>，是一种 UML 行为图。表示系统执行某个方法/操作（如登录操作）时，对象之间的顺序调用关系。</p>\n<p>这个顺序调用关系可以这样理解: 你需要执行系统中某个对象 a 提供的方法/操作 login（登录），但是这个对象又依赖了对象 b 提供的方法 getUser(获取用户)。因此，这里就有了 a -&gt; b 调用关系之说。</p>\n<p>我们可以通过 <strong>SequenceDiagram</strong> 这个插件一键生成方法的序列图。</p>\n<blockquote>\n<p>如果你因为网络问题没办法使用 IDEA 自带的插件市场的话，也可以通过 IDEA 插件市场的官网手动下载安装。</p>\n</blockquote>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/2021052218304014.png\" alt=\"\"></p>\n<p><strong>如何使用呢？</strong></p>\n<p>1、选中方法名（注意不要选类名），然后点击鼠标右键，选择 <strong>Sequence Diagram</strong> 选项即可！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021170110697.png\" alt=\"\"></p>\n<p>2、配置生成的序列图的一些基本的参数比如调用深度之后，我们点击 ok 即可！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/c5040f1105c762ddf8689892913bc02d.png\" alt=\"\"></p>\n<p>3、你还可以通过生成的时序图来定位到相关的代码，这对于我们阅读源码的时候尤其有帮助！</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021171623809.png\" alt=\"\"></p>\n<p>4、时序图生成完成之后，你还可以选择将其导出为图片。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20201021170228723.png\" alt=\"\"></p>\n<p>相关阅读: <a href=\"https://mp.weixin.qq.com/s/SG1twZczqdup_EQAOmNERg\" target=\"_blank\" rel=\"noopener noreferrer\">《安利一个 IDEA 骚操作:一键生成方法的序列图》<ExternalLinkIcon/></a> 。</p>\n<h3 id=\"项目代码统计\" tabindex=\"-1\"> 项目代码统计</h3>\n<p>为了快速分析项目情况，我们可以对项目的 <strong>代码的总行数、单个文件的代码行数、注释行数等信息进行统计。</strong></p>\n<p><strong>Statistic</strong> 这个插件来帮助我们实现这一需求。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210522183550110.png\" alt=\"\"></p>\n<p>有了这个插件之后你可以非常直观地看到你的项目中所有类型的文件的信息比如数量、大小等等，可以帮助你更好地了解你们的项目。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210522183616310.png\" alt=\"\"></p>\n<p>你还可以使用它看所有类的总行数、有效代码行数、注释行数、以及有效代码比重等等这些东西。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210522183630459.png\" alt=\"\"></p>\n<p>如果，你担心插件过多影响 IDEA 速度的话，可以只在有代码统计需求的时候开启这个插件，其他时间禁用它就完事了！</p>\n<p>相关阅读: <a href=\"https://mp.weixin.qq.com/s/fVEeMW6elhu79I-rTZB40A\" target=\"_blank\" rel=\"noopener noreferrer\">快速识别烂项目！试试这款项目代码统计 IDEA 插件<ExternalLinkIcon/></a></p>\n",
      "image": "https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/idea/20210527135533686.png",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "Camel Case: 命名之间快速切换",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/camel-case/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/camel-case/",
      "content_html": "<p>非常有用！</p>\n<p>这个插件可以实现包含 6 种常见命名格式之间的切换。并且，你还可以对转换格式进行相关配置（转换格式） <em>Preferences / Settings | Camel Case</em> 。</p>\n<p><img src=\"@source/plugins/camel-case/assets/camel-case1.png\" alt=\"camel-case1\"></p>\n<p>有了这个插件之后，点击你想要修改的变量或者方法名使用快捷键 <code>shift + option + u</code> (mac) / <code>shift + alt + u</code> (win) 即可实现在多种命名格式之间切换。</p>\n<p><img src=\"@source/plugins/camel-case/assets/camel-case2.gif\" alt=\"camel-case2\"></p>\n<p>如果你突然忘记快捷键的话，可以直接在 IDEA 的菜单栏的 Edit 部分找到。</p>\n<p><img src=\"@source/plugins/camel-case/assets/camel-case3.png\" alt=\"camel-case3\"></p>\n<p>使用这个插件对开发效率提升高吗？拿我之前项目组的情况举个例子:</p>\n<p>我之前有一个项目组的测试名字是驼峰这种形式:</p>\n<p><code>ShouldReturnTicketWhenRobotSaveBagGiven1LockersWith2FreeSpace</code></p>\n<p>但是，使用驼峰形式命名测试方法的名字不太明显，一般建议用下划线 <code>_</code> 的形式:</p>\n<p><code>should_return_ticket_when_robot_save_bag_given_1_lockers_with_2_free_space</code></p>\n<p>如果我们不用这个插件，而是手动去一个一个改的话，工作量想必会很大，而且正确率也会因为手工的原因降低。</p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "CodeGlance: 代码微型地图",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/code-glance/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/code-glance/",
      "content_html": "<p>CodeGlance 提供一个代码的微型地图，当你的类比较多的时候可以帮忙你快速定位到要去的位置。这个插件在我们日常做普通开发的时候用处不大，不过，在你阅读源码的时候还是很有用的，如下图所示:</p>\n<p><img src=\"@source/plugins/code-glance/assets/code-glance.png\" alt=\"code-glance\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "Statistic: 项目代码统计",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/code-statistic/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/code-statistic/",
      "content_html": "<p>编程是一个很奇妙的事情，大部分的我们把大部分时间实际都花在了复制粘贴，而后修改代码上面。</p>\n<p>很多时候，我们并不关注代码质量，只要功能能实现，我才不管一个类的代码有多长、一个方法的代码有多长。</p>\n<p>因此，我们经常会碰到让自己想要骂街的项目，不过，说真的，你自己写的代码也有极大可能被后者 DISS。</p>\n<p>为了快速分析项目情况，判断这个项目是不是一个“垃圾”项目，有一个方法挺简单的。</p>\n<p>那就是<strong>对代码的总行数、单个文件的代码行数、注释行数等信息进行统计。</strong></p>\n<p><strong>怎么统计呢？</strong></p>\n<p>首先想到的是 Excel 。不过，显然太麻烦了。</p>\n<p><strong>有没有专门用于代码统计的工具呢？</strong></p>\n<p>基于 Perl 语言开发的 cloc（count lines of code）或许可以满足你的要求。</p>\n<p><strong>有没有什么更简单的办法呢？</strong></p>\n<p>如果你使用的是 IDEA 进行开发的话，推荐你可以使用一下 <strong>Statistic</strong> 这个插件。</p>\n<p>有了这个插件之后你可以非常直观地看到你的项目中所有类型的文件的信息比如数量、大小等等，可以帮助你更好地了解你们的项目。</p>\n<p><img src=\"@source/plugins/code-statistic/assets/Statistic1.png\" alt=\"Statistic1\"></p>\n<p>你还可以使用它看所有类的总行数、有效代码行数、注释行数、以及有效代码比重等等这些东西。</p>\n<p><img src=\"@source/plugins/code-statistic/assets/Statistic2.png\" alt=\"Statistic2\"></p>\n<p>如果，你担心插件过多影响 IDEA 速度的话，可以只在有代码统计需求的时候开启这个插件，其他时间禁用它就完事了！</p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "Git Commit Template: 提交代码格式规范",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/git-commit-template/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/git-commit-template/",
      "content_html": "<p>没有安装这个插件之前，我们使用 IDEA 提供的 Commit 功能提交代码是下面这样的:</p>\n<p><img src=\"@source/plugins/git-commit-template/assets/Git-Commit-Template1.png\" alt=\"Git-Commit-Template1\"></p>\n<p>使用了这个插件之后是下面这样的，提供了一个 commit 信息模板的输入框:</p>\n<p><img src=\"@source/plugins/git-commit-template/assets/Git-Commit-Template2.png\" alt=\"Git-Commit-Template2\"></p>\n<p>完成之后的效果是这样的:</p>\n<p><img src=\"@source/plugins/git-commit-template/assets/Git-Commit-Template3.png\" alt=\"Git-Commit-Template3\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "GsonFormat: JSON转对象",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/gson-format/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/gson-format/",
      "content_html": "<h2 id=\"gsonformat\" tabindex=\"-1\"> GsonFormat</h2>\n<p>GsonFormat 这个插件可以根据 Gson 库使用的要求，将 JSONObject 格式的 String 解析成实体类。</p>\n<div><p>注</p>\n<p>2021.x 版本以上的 IDEA 可以使用 GsonFormatPlus。</p>\n</div>\n<p>使用起来非常简单，我们新建一个类，然后在类中使用快捷键 <code>option + s</code> (Mac) 或 <code>alt + s</code> (win) 调出操作窗口（<strong>必须在类中使用快捷键才有效</strong>），如下图所示。</p>\n<p><img src=\"@source/plugins/gson-format/assets/gson-format2.png\" alt=\"gson-format2\"></p>\n<p><img src=\"@source/plugins/gson-format/assets/gson-format3.png\" alt=\"gson-format3\"></p>\n<p>这个插件是一个国人几年前写的，不过已经很久没有更新了，可能会因为 IDEA 的版本问题有一些小 Bug。而且，这个插件无法将 JSON 转换为 Kotlin（这个其实无关痛痒，IDEA 自带的就有 Java 转 Kotlin 的功能）。</p>\n<p><img src=\"@source/plugins/gson-format/assets/gson-format1.png\" alt=\"gson-format1\"></p>\n<h2 id=\"robopojogenerator\" tabindex=\"-1\"> RoboPOJOGenerator</h2>\n<p>另外一个与之相似的插件是 <strong>RoboPOJOGenerator</strong> ，这个插件的更新频率比较快。</p>\n<p><code>File-&gt; new -&gt; Generate POJO from JSON</code></p>\n<p><img src=\"@source/plugins/gson-format/assets/RoboPOJOGenerator1.png\" alt=\"RoboPOJOGenerator1\"></p>\n<p>然后将 JSON 格式的数据粘贴进去之后，配置相关属性之后选择“<em>Generate</em>”</p>\n<p><img src=\"@source/plugins/gson-format/assets/RoboPOJOGenerator2.png\" alt=\"RoboPOJOGenerator2\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "IDE Features Trainer: IDEA 交互式教程",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/idea-features-trainer/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/idea-features-trainer/",
      "content_html": "<p>有了这个插件之后，你可以<strong>在 IDE 中以交互方式学习 IDEA 最常用的快捷方式和最基本功能</strong>。</p>\n<div><p>强烈推荐</p>\n<p>此插件非常方便！强烈建议大家安装一个，尤其是刚开始使用 IDEA 的朋友。</p>\n</div>\n<p>当我们安装了这个插件之后，你会发现我们的 IDEA 编辑器的右边多了一个“<strong>Learn</strong>”的选项，我们点击这个选项就可以看到如下界面。</p>\n<p><img src=\"@source/plugins/idea-features-trainer/assets/IDE-Features-Trainer1.png\" alt=\"IDE-Features-Trainer1\"></p>\n<p>我们选择“Editor Basics”进行，然后就可以看到如下界面，这样你就可以按照指示来练习了！非常不错！</p>\n<p><img src=\"@source/plugins/idea-features-trainer/assets/IDE-Features-Trainer2.png\" alt=\"IDE-Features-Trainer2\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "jclasslib: 一款IDEA字节码查看神器",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/jclasslib/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/jclasslib/",
      "content_html": "<p>由于后面要分享的一篇文章中用到了这篇文章要推荐的一个插件，所以这里分享一下。非常实用！你会爱上它的！</p>\n<p><img src=\"@source/plugins/jclasslib/assets/image-20201013084919965.png\" alt=\"jclasslib1\"></p>\n<p><strong>开始推荐 IDEA 字节码查看神器之前，先来回顾一下 Java 字节码是啥。</strong></p>\n<h2 id=\"何为-java-字节码\" tabindex=\"-1\"> 何为 Java 字节码?</h2>\n<p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p>\n<div><p>字节码</p>\n<p>在 Java 中，JVM 可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>\n</div>\n<p><strong>Java 程序从源代码到运行一般有下面 3 步:</strong></p>\n<p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java 程序运行过程.png\" alt=\"Java程序运行过程\"></p>\n<h2 id=\"为什么要查看-java-字节码\" tabindex=\"-1\"> 为什么要查看 Java 字节码？</h2>\n<p>我们在平时学习的时候，经常需要查看某个 java 类的字节码文件。查看字节码文件更容易让我们搞懂 java 代码背后的原理比如搞懂 java 中的各种语法糖的本质。</p>\n<h2 id=\"如何查看-java-字节码\" tabindex=\"-1\"> 如何查看 Java 字节码?</h2>\n<p>如果我们通过命令行来查看某个 class 的字节码文件的话，可以直接通过 <code>javap</code> 命令，不过这种方式太原始了，效率十分低，并且看起来不直观。</p>\n<p>下面介绍两种使用 IDEA 查看类对应字节码文件的方式（<em><code>javap</code>这种方式就不提了</em>）。</p>\n<p>我们以这段代码作为案例:</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Main</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>\n        <span>Integer</span> i <span>=</span> <span>null</span><span>;</span>\n        <span>Boolean</span> flag <span>=</span> <span>false</span><span>;</span>\n        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>flag <span>?</span> <span>0</span><span>:</span> i<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>上面这段代码由于使用三目运算符不当导致诡异了 NPE 异常。为了搞清楚事情的原因，我们来看其对应的字节码。</p>\n<h3 id=\"使用-idea-自带功能\" tabindex=\"-1\"> 使用 IDEA 自带功能</h3>\n<p>我们点击 <code>View -&gt; Show Bytecode</code> 即可通过 IDEA 查看某个类对应的字节码文件。</p>\n<div><p>注意</p>\n<p>查看某个类对应的字节码文件之前需确保它已经被编译过。</p>\n</div>\n<p><img src=\"@source/plugins/jclasslib/assets/image-20201012143530226.png\" alt=\"使用 IDEA 自带功能查看 Java 字节码\"></p>\n<p>稍等几秒钟之后，你就可以直观到看到对应的类的字节码内容了。</p>\n<p><img src=\"@source/plugins/jclasslib/assets/image-20201012145127465.png\" alt=\"jclasslib2\"></p>\n<p>从字节码中可以看出，我圈出来的位置发生了 <strong>拆箱操作</strong> 。</p>\n<blockquote>\n<ul>\n<li><strong>装箱</strong>: 将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>: 将包装类型转换为基本数据类型；</li>\n</ul>\n</blockquote>\n<p>详细解释下就是: <code>flag ? 0: i</code> 这行代码中，<code>0</code> 是基本数据类型 int，返回数据的时候 <code>i</code> 会被强制拆箱成 int 类型，由于 <code>i</code> 的值是 <code>null</code>，因此就抛出了 NPE 异常。</p>\n<div><pre><code><span>Integer</span> i <span>=</span> <span>null</span><span>;</span>\n<span>Boolean</span> flag <span>=</span> <span>false</span><span>;</span>\n<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>flag <span>?</span> <span>0</span><span>:</span> i<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果，我们把代码中 <code>flag</code> 变量的值修改为 <code>true</code> 的话，就不会存在 NPE 问题了，因为会直接返回 <code>0</code>，不会进行拆箱操作。</p>\n<h3 id=\"使用-idea-插件-jclasslib-推荐\" tabindex=\"-1\"> 使用 IDEA 插件 jclasslib(推荐)</h3>\n<p>相比于 IDEA 自带的查看类字节的功能，我更推荐 <code>jclasslib</code> 这个插件，非常棒！</p>\n<p><strong>使用 <code>jclasslib</code> 不光可以直观地查看某个类对应的字节码文件，还可以查看类的基本信息、常量池、接口、属性、函数等信息。</strong></p>\n<p><img src=\"@source/plugins/jclasslib/assets/image-20201012145646086.png\" alt=\"jclasslib3\"></p>\n<p>我们直接在 IDEA 的插件市场即可找到这个插件。我这里已经安装好了。</p>\n<p><img src=\"@source/plugins/jclasslib/assets/image-20201012145900911.png\" alt=\"jclasslib4\"></p>\n<p>安装完成之后，重启 IDEA。点击 <code>View -&gt; Show Bytecode With jclasslib</code> 即可通过 <code>jclasslib</code> 查看某个类对应的字节码文件。</p>\n<p><img src=\"@source/plugins/jclasslib/assets/image-20201012150252106.png\" alt=\"使用 IDEA 插件 jclasslib 查看类的字节码\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "RestfulToolkit: RESTful Web 服务辅助开发工具",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/rest/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/rest/",
      "content_html": "<p>开始推荐这个 IDEA 插件之前，我觉得有必要花一小会时间简单聊聊 <strong>REST</strong> 这个我们经常打交道的概念。</p>\n<h2 id=\"rest-相关概念解读\" tabindex=\"-1\"> REST 相关概念解读</h2>\n<h3 id=\"何为-rest\" tabindex=\"-1\"> 何为 REST？</h3>\n<p>REST 即 <strong>REpresentational State Transfer</strong> 的缩写。这个词组的翻译过来就是&quot;<strong>表现层状态转化</strong>&quot;。</p>\n<p>这样理解起来甚是晦涩，实际上 REST 的全称是 <strong>Resource Representational State Transfer</strong> ，直白地翻译过来就是 <strong>“资源”在网络传输中以某种“表现形式”进行“状态转移”</strong> 。</p>\n<p><strong>有没有感觉很难理解？</strong></p>\n<p>没关系，看了我对 REST 涉及到的一些概念的解读之后你没准就能理解了！</p>\n<ul>\n<li><strong>资源（Resource）</strong>: 我们可以把真实的对象数据称为资源。一个资源既可以是一个集合，也可以是单个个体。比如我们的班级 classes 是代表一个集合形式的资源，而特定的 class 代表单个个体资源。每一种资源都有特定的 URI（统一资源定位符）与之对应，如果我们需要获取这个资源，访问这个 URI 就可以了，比如获取特定的班级: <code>/class/12</code>。另外，资源也可以包含子资源，比如 <code>/classes/classId/teachers</code>: 列出某个指定班级的所有老师的信息</li>\n<li><strong>表现形式（Representational）</strong>: &quot;资源&quot;是一种信息实体，它可以有多种外在表现形式。我们把&quot;资源&quot;具体呈现出来的形式比如 json，xml，image,txt 等等叫做它的&quot;表现层/表现形式&quot;。</li>\n<li><strong>状态转移（State Transfer）</strong>: 大家第一眼看到这个词语一定会很懵逼？内心 BB: 这尼玛是啥啊？ <strong>大白话来说 REST 中的状态转移更多地描述的服务器端资源的状态，比如你通过增删改查（通过 HTTP 动词实现）引起资源状态的改变。</strong> （HTTP 协议是一个无状态的，所有的资源状态都保存在服务器端）</li>\n</ul>\n<h3 id=\"何为-restful-架构\" tabindex=\"-1\"> 何为 RESTful 架构？</h3>\n<p>满足 REST 风格的架构设计就可以称为 RESTful 架构:</p>\n<ol>\n<li>每一个 URI 代表一种资源；</li>\n<li>客户端和服务器之间，传递这种资源的某种表现形式比如 json，xml，image,txt 等等；</li>\n<li>客户端通过特定的 HTTP 动词，对服务器端资源进行操作，实现&quot;表现层状态转化&quot;。</li>\n</ol>\n<h3 id=\"何为-restful-web-服务\" tabindex=\"-1\"> 何为 RESTful Web 服务？</h3>\n<p>基于 REST 架构的 Web 服务就被称为 RESTful Web 服务。</p>\n<h2 id=\"restful-web-服务辅助开发工具\" tabindex=\"-1\"> RESTful Web 服务辅助开发工具</h2>\n<h3 id=\"安装\" tabindex=\"-1\"> 安装</h3>\n<p>这个插件的名字叫做 “<strong>RestfulToolkit</strong>” 。我们直接在 IDEA 的插件市场即可找到这个插件。如下图所示。</p>\n<blockquote>\n<p>如果你因为网络问题没办法使用 IDEA 自带的插件市场的话，也可以通过<a href=\"https://plugins.jetbrains.com/idea\" target=\"_blank\" rel=\"noopener noreferrer\">IDEA 插件市场的官网<ExternalLinkIcon/></a>手动下载安装。</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41a9bfa18920403ba4db83e324f8621e~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<h3 id=\"简单使用\" tabindex=\"-1\"> 简单使用</h3>\n<h4 id=\"url-跳转到对应方法\" tabindex=\"-1\"> URL 跳转到对应方法</h4>\n<p>根据 URL 直接跳转到对应的方法定义 (Windows: <code>ctrl+\\</code> or <code>ctrl+alt+n</code> Mac:<code>command+\\</code> or <code>command+alt+n</code> )并且提供了一个服务的树形可视化显示窗口。 如下图所示。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c26ea05ad472488fbf9eb21627964bee~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<h4 id=\"作为-http-请求工具\" tabindex=\"-1\"> 作为 HTTP 请求工具</h4>\n<p>这个插件还可以作为一个简单的 http 请求工具来使用。如下图所示。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/RestfulToolkit2.png\" alt=\"\"></p>\n<h4 id=\"复制生成-url、复制方法参数\" tabindex=\"-1\"> 复制生成 URL、复制方法参数...</h4>\n<p>这个插件还提供了生成 URL、查询参数、请求体（RequestBody）等功能。</p>\n<p>举个例子。我们选中 <code>Controller</code> 中的某个请求对应的方法右击，你会发现多了几个可选项。当你选择<code>Generate &amp; Copy Full URL</code>的话，就可以把整个请求的路径直接复制下来。eg: <code>http://localhost:9333/api/users?pageNum=1&amp;pageSize=1</code> 。</p>\n<p><img src=\"@source/plugins/rest/assets/RestfulToolkit3.png\" alt=\"\"></p>\n<h4 id=\"将-java-类转换为对应的-json-格式\" tabindex=\"-1\"> 将 Java 类转换为对应的 JSON 格式</h4>\n<p>这个插件还为 Java 类上添加了 <strong>Convert to JSON</strong> 功能 。</p>\n<p>我们选中的某个类对应的方法然后右击，你会发现多了几个可选项。</p>\n<p><img src=\"@source/plugins/rest/assets/RestfulToolkit4.png\" alt=\"\"></p>\n<p>当我们选择 <code>Convert to JSON</code> 的话，你会得到如下 json 类型的数据:</p>\n<div><pre><code><span>{</span>\n  <span>\"username\"</span><span>:</span> <span>\"demoData\"</span><span>,</span>\n  <span>\"password\"</span><span>:</span> <span>\"demoData\"</span><span>,</span>\n  <span>\"rememberMe\"</span><span>:</span> <span>true</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"后记\" tabindex=\"-1\"> 后记</h2>\n<p>RESTFulToolkit 原作者不更新了，IDEA.201 及以上版本不再适配。</p>\n<p>因此，国内就有一个大佬参考 RESTFulToolkit 开发了一款类似的插件 —— RestfulTool（功能较少一些，不过够用了）。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/image-20210830112030237.png\" alt=\"\"></p>\n",
      "image": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41a9bfa18920403ba4db83e324f8621e~tplv-k3u1fbpfcp-zoom-1.image",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "Save Actions: 优化文件保存",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/save-actions/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/save-actions/",
      "content_html": "<p>真必备插件！可以帮助我们在保存文件的时候:</p>\n<ol>\n<li>优化导入；</li>\n<li>格式化代码；</li>\n<li>执行一些 quick fix</li>\n<li>......</li>\n</ol>\n<p>这个插件是支持可配置的，我的配置如下:</p>\n<p><img src=\"@source/plugins/save-actions/assets/save-actions.png\" alt=\"save-actions\"></p>\n<p>实际使用效果如下:</p>\n<p><img src=\"@source/plugins/save-actions/assets/save-actions2.gif\" alt=\"save-actions2\"></p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    },
    {
      "title": "Translation: 翻译",
      "url": "https://codingdocs.github.io/awesome-idea/plugins/translation/",
      "id": "https://codingdocs.github.io/awesome-idea/plugins/translation/",
      "content_html": "<p>有了这个插件之后，你再也不用在编码的时候打开浏览器查找某个单词怎么拼写、某句英文注释什么意思了。</p>\n<p>并且，这个插件支持多种翻译源:</p>\n<ol>\n<li>Google 翻译</li>\n<li>Youdao 翻译</li>\n<li>Baidu 翻译</li>\n</ol>\n<p>除了翻译功能之外还提供了语音朗读、单词本等实用功能。这个插件的 Github 地址是: <a href=\"https://github.com/YiiGuxing/TranslationPlugin\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/YiiGuxing/TranslationPlugin<ExternalLinkIcon/></a> （貌似是国人开发的，很赞）。</p>\n<p><strong>使用方法很简单！选中你要翻译的单词或者句子，使用快捷键 <code>command+ctrl+u(mac)</code> / <code>shift+ctrl+y(win/linux)</code></strong> （如果你忘记了快捷的话，鼠标右键操作即可！）</p>\n<p><img src=\"@source/plugins/translation/assets/translation1.jpg\" alt=\"translation1\"></p>\n<p><strong>如果需要快速打开翻译框，使用快捷键<code>command+ctrl+i(mac)</code>/<code>ctrl + shift + o(win/linux)</code></strong></p>\n<p><img src=\"@source/plugins/translation/assets/translation2.png\" alt=\"translation2\"></p>\n<p>如果你需要将某个重要的单词添加到生词本的话，只需要点击单词旁边的收藏按钮即可！</p>\n",
      "date_modified": "2022-03-30T14:35:32.790Z",
      "authors": [],
      "tags": [
        "IDEA 指南"
      ]
    }
  ]
}