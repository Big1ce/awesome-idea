"use strict";(self.webpackChunkawesome_idea=self.webpackChunkawesome_idea||[]).push([[9012],{6634:(e,a,t)=>{t.r(a),t.d(a,{data:()=>n});const n={key:"v-0761f96f",path:"/plugins/improve-code.html",title:"IDEA 代码优化插件推荐",lang:"zh-CN",frontmatter:{title:"IDEA 代码优化插件推荐",category:["IDEA 指南"],tag:["IDEA","IDEA 插件","代码优化"],summary:"Lombok: 帮你简化代码 之前没有推荐这个插件的原因是觉得已经是人手必备的了。如果你要使用 Lombok 的话，不光是要安装这个插件，你的项目也要引入相关的依赖。 使用 Lombok 能够帮助我们少写很多代码比如 Getter/Setter、Constructor 等等。 关于 Lombok 的使用，可以查看 《十分钟搞懂 Java 效率工具 Lombo",head:[["meta",{property:"og:url",content:"https://codingdocs.github.io/awesome-idea/plugins/improve-code.html"}],["meta",{property:"og:site_name",content:"IDEA 高效使用指南"}],["meta",{property:"og:title",content:"IDEA 代码优化插件推荐"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:image",content:"https://codingdocs.github.io/awesome-idea/"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{name:"twitter:card",content:"summary_large_image"}],["meta",{name:"twitter:image:alt",content:"IDEA 代码优化插件推荐"}],["meta",{property:"article:tag",content:"IDEA"}],["meta",{property:"article:tag",content:"IDEA 插件"}],["meta",{property:"article:tag",content:"代码优化"}]]},excerpt:"",headers:[{level:2,title:"Lombok: 帮你简化代码",slug:"lombok-帮你简化代码",children:[]},{level:2,title:"Codota: 代码智能提示",slug:"codota-代码智能提示",children:[]},{level:2,title:"Alibaba Java Code Guidelines: 阿里巴巴 Java 代码规范",slug:"alibaba-java-code-guidelines-阿里巴巴-java-代码规范",children:[{level:3,title:"手动配置检测规则",slug:"手动配置检测规则",children:[]},{level:3,title:"使用效果",slug:"使用效果",children:[]}]},{level:2,title:"CheckStyle: Java 代码格式规范",slug:"checkstyle-java-代码格式规范",children:[{level:3,title:"为何需要 CheckStyle 插件？",slug:"为何需要-checkstyle-插件",children:[]},{level:3,title:"如何在 Maven/Gradle 项目中集成 Checksytle?",slug:"如何在-maven-gradle-项目中集成-checksytle",children:[]},{level:3,title:"如何安装？",slug:"如何安装",children:[]},{level:3,title:"如何自定义检测规则？",slug:"如何自定义检测规则",children:[]},{level:3,title:"使用效果",slug:"使用效果-1",children:[]}]},{level:2,title:"SonarLint:帮你优化代码",slug:"sonarlint-帮你优化代码",children:[]}],git:{createdTime:1648642351e3,updatedTime:1648642351e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:6.27,words:1881},filePathRelative:"plugins/improve-code.md"}},9908:(e,a,t)=>{t.r(a),t.d(a,{default:()=>re});var n=t(6252),s=t(6984),l=t(6931),o=t(9177),i=t(7009),r=t(3626),p=t(6072);const c=(0,n.uE)('<h2 id="lombok-帮你简化代码" tabindex="-1"><a class="header-anchor" href="#lombok-帮你简化代码" aria-hidden="true">#</a> Lombok: 帮你简化代码</h2><p>之前没有推荐这个插件的原因是觉得已经是人手必备的了。如果你要使用 Lombok 的话，不光是要安装这个插件，你的项目也要引入相关的依赖。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用 Lombok 能够帮助我们少写很多代码比如 Getter/Setter、Constructor 等等。</p>',4),d=(0,n.Uk)("关于 Lombok 的使用，可以查看 "),h={href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485385&idx=2&sn=a7c3fb4485ffd8c019e5541e9b1580cd&chksm=cea24802f9d5c1144eee0da52cfc0cc5e8ee3590990de3bb642df4d4b2a8cd07f12dd54947b9&token=1667678311&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},g=(0,n.Uk)("《十分钟搞懂 Java 效率工具 Lombok 使用与原理》"),u=(0,n.Uk)("。"),m=(0,n.uE)('<h2 id="codota-代码智能提示" tabindex="-1"><a class="header-anchor" href="#codota-代码智能提示" aria-hidden="true">#</a> Codota: 代码智能提示</h2><div class="custom-container note"><p class="custom-container-title">注</p><p>目前 Codota 已经更名为 <strong>Tabnine</strong> 。</p></div><p>我一直在用的一个插件，可以说非常好用了（<em>我身边的很多大佬平时写代码也会用这个插件</em>）。</p><p>Codota 这个插件用于智能代码补全，它基于数百万 Java 程序，能够根据程序上下文提示补全代码。相比于 IDEA 自带的智能提示来说，Codota 的提示更加全面一些。</p><p>除了代码补全之外，Codota 还支持代码智能搜索，直接选中对应的类或者方法即可搜索相关的代码示例。</p><p><img src="'+s+'" alt="Codota2"></p>',6),k=(0,n.Uk)("如果你觉得 IDEA 插件安装的太多比较卡顿的话，不用担心！Codota 插件还有一个对应的 "),b={href:"https://www.codota.com/code",target:"_blank",rel:"noopener noreferrer"},v=(0,n.Uk)("在线网站"),_=(0,n.Uk)("，在这个网站上你可以根据代码关键字搜索相关代码示例，非常不错！"),f=(0,n._)("p",null,[(0,n.Uk)("我在工作中经常会用到，说实话确实给我带来了很大便利，比如我们搜索 "),(0,n._)("code",null,"Files.readAllLines"),(0,n.Uk)(" 相关的代码，搜索出来的结果如下图所示:")],-1),y=(0,n._)("p",null,[(0,n._)("img",{src:l,alt:"Codota3"})],-1),C=(0,n._)("p",null,"另外，Codota 插件的基础功能都是免费的。你的代码也不会被泄露，这点你不用担心。",-1),A=(0,n.Uk)("类似的插件还有阿里云智能编码插件 "),U=(0,n._)("strong",null,"Cosy",-1),x=(0,n.Uk)("(Alibaba Cloud AI Coding Assistant) ，关于 Cosy 的详细介绍，可以看一下我写的 "),j={href:"https://zhuanlan.zhihu.com/p/464874603",target:"_blank",rel:"noopener noreferrer"},I=(0,n.Uk)("阿里云 Java 智能编码插件 Cosy 诞生！"),E=(0,n.Uk)(" 这篇文章。"),S=(0,n._)("h2",{id:"alibaba-java-code-guidelines-阿里巴巴-java-代码规范",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#alibaba-java-code-guidelines-阿里巴巴-java-代码规范","aria-hidden":"true"},"#"),(0,n.Uk)(" Alibaba Java Code Guidelines: 阿里巴巴 Java 代码规范")],-1),w=(0,n.Uk)("阿里巴巴 Java 代码规范，对应的 Github 地址为: "),D={href:"https://github.com/alibaba/p3c",target:"_blank",rel:"noopener noreferrer"},J=(0,n.Uk)("https://github.com/alibaba/p3c"),G=(0,n.Uk)(" 。非常推荐安装！"),L=(0,n._)("p",null,"安装完成之后建议将与语言替换成中文，提示更加友好一点。",-1),W=(0,n._)("p",null,[(0,n._)("img",{src:o,alt:"Alibaba-Java-Code-Guidelines2"})],-1),z=(0,n._)("p",null,"根据官方描述:",-1),T=(0,n.Uk)("目前这个插件实现了开发手册中的的 53 条规则，大部分基于 PMD 实现，其中有 4 条规则基于 IDEA 实现，并且基于 IDEA "),M={href:"https://www.jetbrains.com/help/idea/code-inspection.html",target:"_blank",rel:"noopener noreferrer"},N=(0,n.Uk)("Inspection"),P=(0,n.Uk)("实现了实时检测功能。部分规则实现了 Quick Fix 功能，对于可以提供 Quick Fix 但没有提供的，我们会尽快实现，也欢迎有兴趣的同学加入进来一起努力。 目前插件检测有两种模式: 实时检测、手动触发。"),H=(0,n.uE)('<p>上述提到的开发手册也就是在 Java 开发领域赫赫有名的《阿里巴巴 Java 开发手册》。</p><h3 id="手动配置检测规则" tabindex="-1"><a class="header-anchor" href="#手动配置检测规则" aria-hidden="true">#</a> 手动配置检测规则</h3><p>你还可以手动配置相关 inspection 规则:</p><p><img src="'+i+'" alt="Alibaba-Java-Code-Guidelines3"></p><h3 id="使用效果" tabindex="-1"><a class="header-anchor" href="#使用效果" aria-hidden="true">#</a> 使用效果</h3><p>这个插件会实时检测出我们的代码不匹配它的规则的地方，并且会给出修改建议。比如我们按照下面的方式去创建线程池的话，这个插件就会帮我们检测出来,如下图所示。</p><p><img src="'+r+'" alt="Alibaba-Java-Code-Guidelines1"></p><p>这个可以对应上 《阿里巴巴 Java 开发手册》 这本书关于创建线程池的方式说明。</p><p><img src="'+p+'" alt=""></p><h2 id="checkstyle-java-代码格式规范" tabindex="-1"><a class="header-anchor" href="#checkstyle-java-代码格式规范" aria-hidden="true">#</a> CheckStyle: Java 代码格式规范</h2><h3 id="为何需要-checkstyle-插件" tabindex="-1"><a class="header-anchor" href="#为何需要-checkstyle-插件" aria-hidden="true">#</a> 为何需要 CheckStyle 插件？</h3><p><strong>CheckStyle 几乎是 Java 项目开发必备的一个插件了，它会帮助我们检查 Java 代码的格式是否有问题比如变量命名格式是否有问题、某一行代码的长度是否过长等等。</strong></p><p>在项目上，<strong>通过项目开发人员自我约束来规范代码格式必然是不靠谱的！</strong> 因此，我们非常需要这样一款工具来帮助我们规范代码格式。</p><p>如果你看过我写的轮子的话，可以发现我为每一个项目都集成了 CheckStyle，并且设置了 <strong>Git Commit 钩子</strong>，保证在提交代码之前代码格式没有问题。</p>',14),Q={class:"custom-container info"},q=(0,n._)("p",{class:"custom-container-title"},"Guide 哥造的轮子 (代码简洁，结构清晰，欢迎学习，欢迎一起完善)",-1),F={href:"https://github.com/Snailclimb/guide-rpc-framework",target:"_blank",rel:"noopener noreferrer"},R=(0,n.Uk)("guide-rpc-framework"),Z=(0,n.Uk)(": A custom RPC framework implemented by Netty+Kyro+Zookeeper.（一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程）"),B={href:"https://github.com/Snailclimb/jsoncat",target:"_blank",rel:"noopener noreferrer"},K=(0,n.Uk)("jsoncat"),O=(0,n.Uk)(": 仿 Spring Boot 但不同于 Spring Boot 的一个轻量级的 HTTP 框架"),Y=(0,n._)("div",{class:"custom-container info"},[(0,n._)("p",{class:"custom-container-title"},"**Git 钩子**"),(0,n._)("p",null,[(0,n.Uk)("Git 能在特定的重要动作比如 commit、push 发生时触发自定义脚本。 钩子都被存储在 Git 目录下的 "),(0,n._)("code",null,"hooks"),(0,n.Uk)(" 子目录中。 也即绝大部分项目中的 "),(0,n._)("code",null,".git/hooks"),(0,n.Uk)(" 。")])],-1),V=(0,n._)("h3",{id:"如何在-maven-gradle-项目中集成-checksytle",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#如何在-maven-gradle-项目中集成-checksytle","aria-hidden":"true"},"#"),(0,n.Uk)(" 如何在 Maven/Gradle 项目中集成 Checksytle?")],-1),X=(0,n._)("p",null,"一般情况下，我们都是将其集成在项目中，并设置相应的 Git 钩子。网上有相应的介绍文章，这里就不多提了。",-1),$=(0,n._)("p",null,"如果你觉得网上的文章不直观的话，可以参考我上面提到了两个轮子:",-1),ee={href:"https://github.com/Snailclimb/guide-rpc-framework",target:"_blank",rel:"noopener noreferrer"},ae=(0,n.Uk)("guide-rpc-framework"),te=(0,n.Uk)(": Maven 项目集成 Checksytle。"),ne={href:"https://github.com/Snailclimb/jsoncat",target:"_blank",rel:"noopener noreferrer"},se=(0,n.Uk)("jsoncat"),le=(0,n.Uk)(": Gradle 项目集成 Checksytle。"),oe=(0,n.uE)('<p>如果你在项目中集成了 Checksytle 的话，每次检测会生成一个 HTML 格式的文件告诉你哪里的代码格式不对，这样看着非常不直观。通过 Checksytle 插件的话可以非常直观的将项目中存在格式问题的地方显示出来。</p><p><img src="https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/image-20201013135044410.png" alt=""></p><p>如果你只是自己在本地使用，并不想在项目中集成 Checksytle 的话也可以，只需要下载一个 Checksytle 插件就足够了。</p><h3 id="如何安装" tabindex="-1"><a class="header-anchor" href="#如何安装" aria-hidden="true">#</a> 如何安装？</h3><p>我们直接在 IDEA 的插件市场即可找到这个插件。我这里已经安装好了。</p><p><img src="https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/image-20201013103610557.png" alt=""></p><p>安装插件之后重启 IDEA，你会发现就可以在底部菜单栏找到 CheckStyle 了。</p><p><img src="https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/image-20201013134644991.png" alt=""></p><h3 id="如何自定义检测规则" tabindex="-1"><a class="header-anchor" href="#如何自定义检测规则" aria-hidden="true">#</a> 如何自定义检测规则？</h3><p>如果你需要自定义代码格式检测规则的话，可以按照如下方式进行配置（你可以导入用于自定义检测规则的<code>CheckStyle.xml</code>文件）。</p><p><img src="https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/setting-check-style.png" alt=""></p><h3 id="使用效果-1" tabindex="-1"><a class="header-anchor" href="#使用效果-1" aria-hidden="true">#</a> 使用效果</h3><p>配置完成之后，按照如下方式使用这个插件！</p><p><img src="https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images/IDEA插件/run-check-style.png" alt="run-check-style"></p><p>可以非常清晰的看到: CheckStyle 插件已经根据我们自定义的规则将项目中的代码存在格式问题的地方都检测了出来。</p><h2 id="sonarlint-帮你优化代码" tabindex="-1"><a class="header-anchor" href="#sonarlint-帮你优化代码" aria-hidden="true">#</a> SonarLint:帮你优化代码</h2><p>SonarLint 帮助你发现代码的错误和漏洞，就像是代码拼写检查器一样，SonarLint 可以实时显示出代码的问题，并提供清晰的修复指导，以便你提交代码之前就可以解决它们。</p><p><img src="https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-2@main/系统设计/image-20201019222817359.png" alt=""></p><p>并且，很多项目都集成了 SonarQube,SonarLint 可以很方便地与 SonarQube 集成。</p>',19),ie={},re=(0,t(3744).Z)(ie,[["render",function(e,a){const t=(0,n.up)("ExternalLinkIcon");return(0,n.wg)(),(0,n.iD)(n.HY,null,[c,(0,n._)("p",null,[d,(0,n._)("a",h,[g,(0,n.Wm)(t)]),u]),m,(0,n._)("p",null,[k,(0,n._)("a",b,[v,(0,n.Wm)(t)]),_]),f,y,C,(0,n._)("p",null,[A,U,x,(0,n._)("a",j,[I,(0,n.Wm)(t)]),E]),S,(0,n._)("p",null,[w,(0,n._)("a",D,[J,(0,n.Wm)(t)]),G]),L,W,z,(0,n._)("blockquote",null,[(0,n._)("p",null,[T,(0,n._)("a",M,[N,(0,n.Wm)(t)]),P])]),H,(0,n._)("div",Q,[q,(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("a",F,[R,(0,n.Wm)(t)]),Z]),(0,n._)("li",null,[(0,n._)("a",B,[K,(0,n.Wm)(t)]),O])]),Y]),V,X,$,(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("a",ee,[ae,(0,n.Wm)(t)]),te]),(0,n._)("li",null,[(0,n._)("a",ne,[se,(0,n.Wm)(t)]),le])]),oe],64)}]])},6984:(e,a,t)=>{e.exports=t.p+"assets/img/Codota2.096a2f01.png"},6931:(e,a,t)=>{e.exports=t.p+"assets/img/Codota3.f55df428.png"},3626:(e,a,t)=>{e.exports=t.p+"assets/img/Alibaba-Java-Code-Guidelines1.854506c1.png"},9177:(e,a,t)=>{e.exports=t.p+"assets/img/Alibaba-Java-Code-Guidelines2.2c3866e0.png"},7009:(e,a,t)=>{e.exports=t.p+"assets/img/Alibaba-Java-Code-Guidelines3.133c8a6e.png"},6072:(e,a,t)=>{e.exports=t.p+"assets/img/阿里巴巴开发手册-线程池创建.35a6b88b.png"}}]);